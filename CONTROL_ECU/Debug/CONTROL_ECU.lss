
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002562  000025f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007a  0080007a  00002610  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000142c  00000000  00000000  00005118  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000843d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c9 0a 	call	0x1592	; 0x1592 <main>
      8a:	0c 94 af 12 	jmp	0x255e	; 0x255e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
#include "gpio.h"
#include "buzzer.h"
#include "common_macros.h"

void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <home_screen>:
uint8 g_DC_tick = 0;                                          /*use in buzzer action function*/
uint8 g_uart_rx = 0;                                          /* to receive bytes from uart */

/*----------------------------------FUNCTION DEFINATION------------------------*/
uint8 home_screen(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	2e 97       	sbiw	r28, 0x0e	; 14
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	g_uart_rx= 0;
     bac:	10 92 7c 00 	sts	0x007C, r1
	while(1)
	{
		g_uart_rx = UART_recieveByte();   /*receive byte from hmi*/
     bb0:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_recieveByte>
     bb4:	80 93 7c 00 	sts	0x007C, r24
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a8 ec       	ldi	r26, 0xC8	; 200
     bbe:	b2 e4       	ldi	r27, 0x42	; 66
     bc0:	8b 87       	std	Y+11, r24	; 0x0b
     bc2:	9c 87       	std	Y+12, r25	; 0x0c
     bc4:	ad 87       	std	Y+13, r26	; 0x0d
     bc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bca:	7c 85       	ldd	r23, Y+12	; 0x0c
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	4a ef       	ldi	r20, 0xFA	; 250
     bd6:	54 e4       	ldi	r21, 0x44	; 68
     bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	8f 83       	std	Y+7, r24	; 0x07
     be2:	98 87       	std	Y+8, r25	; 0x08
     be4:	a9 87       	std	Y+9, r26	; 0x09
     be6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be8:	6f 81       	ldd	r22, Y+7	; 0x07
     bea:	78 85       	ldd	r23, Y+8	; 0x08
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	2c f4       	brge	.+10     	; 0xc0a <home_screen+0x72>
		__ticks = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9e 83       	std	Y+6, r25	; 0x06
     c06:	8d 83       	std	Y+5, r24	; 0x05
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <home_screen+0xf0>
	else if (__tmp > 65535)
     c0a:	6f 81       	ldd	r22, Y+7	; 0x07
     c0c:	78 85       	ldd	r23, Y+8	; 0x08
     c0e:	89 85       	ldd	r24, Y+9	; 0x09
     c10:	9a 85       	ldd	r25, Y+10	; 0x0a
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	3f ef       	ldi	r19, 0xFF	; 255
     c16:	4f e7       	ldi	r20, 0x7F	; 127
     c18:	57 e4       	ldi	r21, 0x47	; 71
     c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	4c f5       	brge	.+82     	; 0xc74 <home_screen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c22:	6b 85       	ldd	r22, Y+11	; 0x0b
     c24:	7c 85       	ldd	r23, Y+12	; 0x0c
     c26:	8d 85       	ldd	r24, Y+13	; 0x0d
     c28:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9e 83       	std	Y+6, r25	; 0x06
     c48:	8d 83       	std	Y+5, r24	; 0x05
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <home_screen+0xd2>
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <home_screen+0xc0>
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	9e 83       	std	Y+6, r25	; 0x06
     c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	69 f7       	brne	.-38     	; 0xc4c <home_screen+0xb4>
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <home_screen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	6f 81       	ldd	r22, Y+7	; 0x07
     c76:	78 85       	ldd	r23, Y+8	; 0x08
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <home_screen+0xfc>
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

		if((g_uart_rx == '+') || (g_uart_rx == '-'))
     c9c:	80 91 7c 00 	lds	r24, 0x007C
     ca0:	8b 32       	cpi	r24, 0x2B	; 43
     ca2:	29 f0       	breq	.+10     	; 0xcae <home_screen+0x116>
     ca4:	80 91 7c 00 	lds	r24, 0x007C
     ca8:	8d 32       	cpi	r24, 0x2D	; 45
     caa:	09 f0       	breq	.+2      	; 0xcae <home_screen+0x116>
     cac:	81 cf       	rjmp	.-254    	; 0xbb0 <home_screen+0x18>
		{
			break;
		}
	}
	return g_uart_rx;   /*return this byte */
     cae:	80 91 7c 00 	lds	r24, 0x007C
}
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <newPassward>:
void newPassward(uint8 *str1){
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	61 97       	sbiw	r28, 0x11	; 17
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	99 8b       	std	Y+17, r25	; 0x11
     cde:	88 8b       	std	Y+16, r24	; 0x10
	UART_sendByte(NEW_PASS);  /* send NEW_PASS to hmi to indicate it to what actin it will take */
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
	uint8 i= 0;    /*counter*/
     ce6:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		str1[i] = UART_recieveByte();    /*receive byte from hmi and store in the  string that act as password*/
     ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	88 89       	ldd	r24, Y+16	; 0x10
     cf0:	99 89       	ldd	r25, Y+17	; 0x11
     cf2:	8c 01       	movw	r16, r24
     cf4:	02 0f       	add	r16, r18
     cf6:	13 1f       	adc	r17, r19
     cf8:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_recieveByte>
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	a8 ec       	ldi	r26, 0xC8	; 200
     d06:	b2 e4       	ldi	r27, 0x42	; 66
     d08:	8b 87       	std	Y+11, r24	; 0x0b
     d0a:	9c 87       	std	Y+12, r25	; 0x0c
     d0c:	ad 87       	std	Y+13, r26	; 0x0d
     d0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d10:	6b 85       	ldd	r22, Y+11	; 0x0b
     d12:	7c 85       	ldd	r23, Y+12	; 0x0c
     d14:	8d 85       	ldd	r24, Y+13	; 0x0d
     d16:	9e 85       	ldd	r25, Y+14	; 0x0e
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4a ef       	ldi	r20, 0xFA	; 250
     d1e:	54 e4       	ldi	r21, 0x44	; 68
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	8f 83       	std	Y+7, r24	; 0x07
     d2a:	98 87       	std	Y+8, r25	; 0x08
     d2c:	a9 87       	std	Y+9, r26	; 0x09
     d2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d30:	6f 81       	ldd	r22, Y+7	; 0x07
     d32:	78 85       	ldd	r23, Y+8	; 0x08
     d34:	89 85       	ldd	r24, Y+9	; 0x09
     d36:	9a 85       	ldd	r25, Y+10	; 0x0a
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	5f e3       	ldi	r21, 0x3F	; 63
     d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d44:	88 23       	and	r24, r24
     d46:	2c f4       	brge	.+10     	; 0xd52 <newPassward+0x8e>
		__ticks = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <newPassward+0x10c>
	else if (__tmp > 65535)
     d52:	6f 81       	ldd	r22, Y+7	; 0x07
     d54:	78 85       	ldd	r23, Y+8	; 0x08
     d56:	89 85       	ldd	r24, Y+9	; 0x09
     d58:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	4f e7       	ldi	r20, 0x7F	; 127
     d60:	57 e4       	ldi	r21, 0x47	; 71
     d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d66:	18 16       	cp	r1, r24
     d68:	4c f5       	brge	.+82     	; 0xdbc <newPassward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d70:	9e 85       	ldd	r25, Y+14	; 0x0e
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <newPassward+0xee>
     d94:	88 ec       	ldi	r24, 0xC8	; 200
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	8b 83       	std	Y+3, r24	; 0x03
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <newPassward+0xdc>
     da4:	9c 83       	std	Y+4, r25	; 0x04
     da6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	69 f7       	brne	.-38     	; 0xd94 <newPassward+0xd0>
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <newPassward+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9e 83       	std	Y+6, r25	; 0x06
     dce:	8d 83       	std	Y+5, r24	; 0x05
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <newPassward+0x118>
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

		if(str1[i] == 13)            /* 13 mean enter*/
     de4:	8f 85       	ldd	r24, Y+15	; 0x0f
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	88 89       	ldd	r24, Y+16	; 0x10
     dec:	99 89       	ldd	r25, Y+17	; 0x11
     dee:	fc 01       	movw	r30, r24
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	80 81       	ld	r24, Z
     df6:	8d 30       	cpi	r24, 0x0D	; 13
     df8:	a1 f4       	brne	.+40     	; 0xe22 <newPassward+0x15e>
		{
			str1[i] = '\0';
     dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	88 89       	ldd	r24, Y+16	; 0x10
     e02:	99 89       	ldd	r25, Y+17	; 0x11
     e04:	fc 01       	movw	r30, r24
     e06:	e2 0f       	add	r30, r18
     e08:	f3 1f       	adc	r31, r19
     e0a:	10 82       	st	Z, r1
			break;
		}
		i++;
	}
}
     e0c:	61 96       	adiw	r28, 0x11	; 17
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret
		if(str1[i] == 13)            /* 13 mean enter*/
		{
			str1[i] = '\0';
			break;
		}
		i++;
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	8f 87       	std	Y+15, r24	; 0x0f
     e28:	5f cf       	rjmp	.-322    	; 0xce8 <newPassward+0x24>

00000e2a <rePassward>:
	}
}
void rePassward(uint8 *str2)
{
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	61 97       	sbiw	r28, 0x11	; 17
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	99 8b       	std	Y+17, r25	; 0x11
     e44:	88 8b       	std	Y+16, r24	; 0x10
	UART_sendByte(RE_PASS); /* send NEW_PASS to hmi to indicate it to what actin it will take */
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
	uint8 i= 0;        /*counter*/
     e4c:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		str2[i] = UART_recieveByte();      /*receive byte from hmi and store in the  string that act as password*/
     e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	88 89       	ldd	r24, Y+16	; 0x10
     e56:	99 89       	ldd	r25, Y+17	; 0x11
     e58:	8c 01       	movw	r16, r24
     e5a:	02 0f       	add	r16, r18
     e5c:	13 1f       	adc	r17, r19
     e5e:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_recieveByte>
     e62:	f8 01       	movw	r30, r16
     e64:	80 83       	st	Z, r24
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a8 ec       	ldi	r26, 0xC8	; 200
     e6c:	b2 e4       	ldi	r27, 0x42	; 66
     e6e:	8b 87       	std	Y+11, r24	; 0x0b
     e70:	9c 87       	std	Y+12, r25	; 0x0c
     e72:	ad 87       	std	Y+13, r26	; 0x0d
     e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e76:	6b 85       	ldd	r22, Y+11	; 0x0b
     e78:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	4a ef       	ldi	r20, 0xFA	; 250
     e84:	54 e4       	ldi	r21, 0x44	; 68
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	8f 83       	std	Y+7, r24	; 0x07
     e90:	98 87       	std	Y+8, r25	; 0x08
     e92:	a9 87       	std	Y+9, r26	; 0x09
     e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eaa:	88 23       	and	r24, r24
     eac:	2c f4       	brge	.+10     	; 0xeb8 <rePassward+0x8e>
		__ticks = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	3f c0       	rjmp	.+126    	; 0xf36 <rePassward+0x10c>
	else if (__tmp > 65535)
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	57 e4       	ldi	r21, 0x47	; 71
     ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ecc:	18 16       	cp	r1, r24
     ece:	4c f5       	brge	.+82     	; 0xf22 <rePassward+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e2       	ldi	r20, 0x20	; 32
     ede:	51 e4       	ldi	r21, 0x41	; 65
     ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <rePassward+0xee>
     efa:	88 ec       	ldi	r24, 0xC8	; 200
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <rePassward+0xdc>
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	69 f7       	brne	.-38     	; 0xefa <rePassward+0xd0>
     f20:	14 c0       	rjmp	.+40     	; 0xf4a <rePassward+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f22:	6f 81       	ldd	r22, Y+7	; 0x07
     f24:	78 85       	ldd	r23, Y+8	; 0x08
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <rePassward+0x118>
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

		if(str2[i] == 13)                     /* 13 mean enter*/
     f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	88 89       	ldd	r24, Y+16	; 0x10
     f52:	99 89       	ldd	r25, Y+17	; 0x11
     f54:	fc 01       	movw	r30, r24
     f56:	e2 0f       	add	r30, r18
     f58:	f3 1f       	adc	r31, r19
     f5a:	80 81       	ld	r24, Z
     f5c:	8d 30       	cpi	r24, 0x0D	; 13
     f5e:	a1 f4       	brne	.+40     	; 0xf88 <rePassward+0x15e>
		{
			str2[i] = '\0';
     f60:	8f 85       	ldd	r24, Y+15	; 0x0f
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	88 89       	ldd	r24, Y+16	; 0x10
     f68:	99 89       	ldd	r25, Y+17	; 0x11
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	10 82       	st	Z, r1

			break;
		}
		i++;
	}
}
     f72:	61 96       	adiw	r28, 0x11	; 17
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret
		{
			str2[i] = '\0';

			break;
		}
		i++;
     f88:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	8f 87       	std	Y+15, r24	; 0x0f
     f8e:	5f cf       	rjmp	.-322    	; 0xe4e <rePassward+0x24>

00000f90 <currentPasword>:
	}
}
void currentPasword (uint8 *str3)
{
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	61 97       	sbiw	r28, 0x11	; 17
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	99 8b       	std	Y+17, r25	; 0x11
     faa:	88 8b       	std	Y+16, r24	; 0x10
	UART_sendByte(currtent_pass);             /* send NEW_PASS to hmi to indicate it to what actin it will take */
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
	uint8 i= 0;                                /*counter*/
     fb2:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		str3[i] = UART_recieveByte();           /*receive byte from hmi and store in the  string that act as password*/
     fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	88 89       	ldd	r24, Y+16	; 0x10
     fbc:	99 89       	ldd	r25, Y+17	; 0x11
     fbe:	8c 01       	movw	r16, r24
     fc0:	02 0f       	add	r16, r18
     fc2:	13 1f       	adc	r17, r19
     fc4:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_recieveByte>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 83       	st	Z, r24
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a8 ec       	ldi	r26, 0xC8	; 200
     fd2:	b2 e4       	ldi	r27, 0x42	; 66
     fd4:	8b 87       	std	Y+11, r24	; 0x0b
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	ad 87       	std	Y+13, r26	; 0x0d
     fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fde:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a ef       	ldi	r20, 0xFA	; 250
     fea:	54 e4       	ldi	r21, 0x44	; 68
     fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8f 83       	std	Y+7, r24	; 0x07
     ff6:	98 87       	std	Y+8, r25	; 0x08
     ff8:	a9 87       	std	Y+9, r26	; 0x09
     ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	2c f4       	brge	.+10     	; 0x101e <currentPasword+0x8e>
		__ticks = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	3f c0       	rjmp	.+126    	; 0x109c <currentPasword+0x10c>
	else if (__tmp > 65535)
    101e:	6f 81       	ldd	r22, Y+7	; 0x07
    1020:	78 85       	ldd	r23, Y+8	; 0x08
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1032:	18 16       	cp	r1, r24
    1034:	4c f5       	brge	.+82     	; 0x1088 <currentPasword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	6b 85       	ldd	r22, Y+11	; 0x0b
    1038:	7c 85       	ldd	r23, Y+12	; 0x0c
    103a:	8d 85       	ldd	r24, Y+13	; 0x0d
    103c:	9e 85       	ldd	r25, Y+14	; 0x0e
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	0f c0       	rjmp	.+30     	; 0x107e <currentPasword+0xee>
    1060:	88 ec       	ldi	r24, 0xC8	; 200
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <currentPasword+0xdc>
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	69 f7       	brne	.-38     	; 0x1060 <currentPasword+0xd0>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <currentPasword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <currentPasword+0x118>
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

		if(str3[i] == 13)
    10b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	88 89       	ldd	r24, Y+16	; 0x10
    10b8:	99 89       	ldd	r25, Y+17	; 0x11
    10ba:	fc 01       	movw	r30, r24
    10bc:	e2 0f       	add	r30, r18
    10be:	f3 1f       	adc	r31, r19
    10c0:	80 81       	ld	r24, Z
    10c2:	8d 30       	cpi	r24, 0x0D	; 13
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <currentPasword+0x15e>
		{
			str3[i] = '\0';
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	88 89       	ldd	r24, Y+16	; 0x10
    10ce:	99 89       	ldd	r25, Y+17	; 0x11
    10d0:	fc 01       	movw	r30, r24
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	10 82       	st	Z, r1

			break;
		}
		i++;
	}
}
    10d8:	61 96       	adiw	r28, 0x11	; 17
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret
		{
			str3[i] = '\0';

			break;
		}
		i++;
    10ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	8f 87       	std	Y+15, r24	; 0x0f
    10f4:	5f cf       	rjmp	.-322    	; 0xfb4 <currentPasword+0x24>

000010f6 <cheakPassward>:
	}
}
uint8 cheakPassward(uint8 *str1, uint8 *str2)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	27 97       	sbiw	r28, 0x07	; 7
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	9c 83       	std	Y+4, r25	; 0x04
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	7e 83       	std	Y+6, r23	; 0x06
    1110:	6d 83       	std	Y+5, r22	; 0x05
	for(int i = 0; i < pass_length; i++)
    1112:	1a 82       	std	Y+2, r1	; 0x02
    1114:	19 82       	std	Y+1, r1	; 0x01
    1116:	1c c0       	rjmp	.+56     	; 0x1150 <cheakPassward+0x5a>
	{
		if(str1[i] !=  str2[i])         /* check if the tow string are the same to confirmation */
    1118:	29 81       	ldd	r18, Y+1	; 0x01
    111a:	3a 81       	ldd	r19, Y+2	; 0x02
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	fc 01       	movw	r30, r24
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	40 81       	ld	r20, Z
    1128:	29 81       	ldd	r18, Y+1	; 0x01
    112a:	3a 81       	ldd	r19, Y+2	; 0x02
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	80 81       	ld	r24, Z
    1138:	48 17       	cp	r20, r24
    113a:	29 f0       	breq	.+10     	; 0x1146 <cheakPassward+0x50>
		{
			UART_sendByte(NOT_MATCH);
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
			return 0;
    1142:	1f 82       	std	Y+7, r1	; 0x07
    1144:	0c c0       	rjmp	.+24     	; 0x115e <cheakPassward+0x68>
		i++;
	}
}
uint8 cheakPassward(uint8 *str1, uint8 *str2)
{
	for(int i = 0; i < pass_length; i++)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	85 30       	cpi	r24, 0x05	; 5
    1156:	91 05       	cpc	r25, r1
    1158:	fc f2       	brlt	.-66     	; 0x1118 <cheakPassward+0x22>
			UART_sendByte(NOT_MATCH);
			return 0;

		}
	}
	return 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	8f 83       	std	Y+7, r24	; 0x07
    115e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1160:	27 96       	adiw	r28, 0x07	; 7
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <storPassward>:
void storPassward(uint8 *str1)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	61 97       	sbiw	r28, 0x11	; 17
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	99 8b       	std	Y+17, r25	; 0x11
    1188:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;         /*counter*/
    118a:	1f 86       	std	Y+15, r1	; 0x0f
	eeprom_last_location = eeprom_first_location;   /*let the last location variable in the eeprom = the first location to increment it*/
    118c:	80 91 6e 00 	lds	r24, 0x006E
    1190:	90 91 6f 00 	lds	r25, 0x006F
    1194:	90 93 7e 00 	sts	0x007E, r25
    1198:	80 93 7d 00 	sts	0x007D, r24
    119c:	8f c0       	rjmp	.+286    	; 0x12bc <storPassward+0x14a>
	while(i < pass_length)
	{
		EEPROM_writeByte(eeprom_last_location, str1[i]);   /*write byte in eeprom */
    119e:	40 91 7d 00 	lds	r20, 0x007D
    11a2:	50 91 7e 00 	lds	r21, 0x007E
    11a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	88 89       	ldd	r24, Y+16	; 0x10
    11ae:	99 89       	ldd	r25, Y+17	; 0x11
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	20 81       	ld	r18, Z
    11b8:	ca 01       	movw	r24, r20
    11ba:	62 2f       	mov	r22, r18
    11bc:	0e 94 be 0c 	call	0x197c	; 0x197c <EEPROM_writeByte>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a8 ec       	ldi	r26, 0xC8	; 200
    11c6:	b2 e4       	ldi	r27, 0x42	; 66
    11c8:	8b 87       	std	Y+11, r24	; 0x0b
    11ca:	9c 87       	std	Y+12, r25	; 0x0c
    11cc:	ad 87       	std	Y+13, r26	; 0x0d
    11ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	4a ef       	ldi	r20, 0xFA	; 250
    11de:	54 e4       	ldi	r21, 0x44	; 68
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	8f 83       	std	Y+7, r24	; 0x07
    11ea:	98 87       	std	Y+8, r25	; 0x08
    11ec:	a9 87       	std	Y+9, r26	; 0x09
    11ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f0:	6f 81       	ldd	r22, Y+7	; 0x07
    11f2:	78 85       	ldd	r23, Y+8	; 0x08
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1204:	88 23       	and	r24, r24
    1206:	2c f4       	brge	.+10     	; 0x1212 <storPassward+0xa0>
		__ticks = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	3f c0       	rjmp	.+126    	; 0x1290 <storPassward+0x11e>
	else if (__tmp > 65535)
    1212:	6f 81       	ldd	r22, Y+7	; 0x07
    1214:	78 85       	ldd	r23, Y+8	; 0x08
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	3f ef       	ldi	r19, 0xFF	; 255
    121e:	4f e7       	ldi	r20, 0x7F	; 127
    1220:	57 e4       	ldi	r21, 0x47	; 71
    1222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1226:	18 16       	cp	r1, r24
    1228:	4c f5       	brge	.+82     	; 0x127c <storPassward+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122a:	6b 85       	ldd	r22, Y+11	; 0x0b
    122c:	7c 85       	ldd	r23, Y+12	; 0x0c
    122e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1230:	9e 85       	ldd	r25, Y+14	; 0x0e
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	0f c0       	rjmp	.+30     	; 0x1272 <storPassward+0x100>
    1254:	88 ec       	ldi	r24, 0xC8	; 200
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9c 83       	std	Y+4, r25	; 0x04
    125a:	8b 83       	std	Y+3, r24	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <storPassward+0xee>
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1272:	8d 81       	ldd	r24, Y+5	; 0x05
    1274:	9e 81       	ldd	r25, Y+6	; 0x06
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	69 f7       	brne	.-38     	; 0x1254 <storPassward+0xe2>
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <storPassward+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127c:	6f 81       	ldd	r22, Y+7	; 0x07
    127e:	78 85       	ldd	r23, Y+8	; 0x08
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	9a 85       	ldd	r25, Y+10	; 0x0a
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <storPassward+0x12a>
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		eeprom_last_location++;           /*increment to the next address in eeprom*/
    12a4:	80 91 7d 00 	lds	r24, 0x007D
    12a8:	90 91 7e 00 	lds	r25, 0x007E
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	90 93 7e 00 	sts	0x007E, r25
    12b2:	80 93 7d 00 	sts	0x007D, r24
		i++;
    12b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	8f 87       	std	Y+15, r24	; 0x0f
}
void storPassward(uint8 *str1)
{
	uint8 i = 0;         /*counter*/
	eeprom_last_location = eeprom_first_location;   /*let the last location variable in the eeprom = the first location to increment it*/
	while(i < pass_length)
    12bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12be:	85 30       	cpi	r24, 0x05	; 5
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <storPassward+0x152>
    12c2:	6d cf       	rjmp	.-294    	; 0x119e <storPassward+0x2c>
		EEPROM_writeByte(eeprom_last_location, str1[i]);   /*write byte in eeprom */
		_delay_ms(100);
		eeprom_last_location++;           /*increment to the next address in eeprom*/
		i++;
	}
	EEPROM_writeByte(eeprom_last_location, '\0');   /*put null in the last element of the string*/
    12c4:	80 91 7d 00 	lds	r24, 0x007D
    12c8:	90 91 7e 00 	lds	r25, 0x007E
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	0e 94 be 0c 	call	0x197c	; 0x197c <EEPROM_writeByte>
}
    12d2:	61 96       	adiw	r28, 0x11	; 17
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <readPassward>:
void readPassward(uint8 *str4)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <readPassward+0x6>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	9b 83       	std	Y+3, r25	; 0x03
    12f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    12f4:	19 82       	std	Y+1, r1	; 0x01
	eeprom_last_location = eeprom_first_location; /*let the last location variable in the eeprom = the first location to increment it*/
    12f6:	80 91 6e 00 	lds	r24, 0x006E
    12fa:	90 91 6f 00 	lds	r25, 0x006F
    12fe:	90 93 7e 00 	sts	0x007E, r25
    1302:	80 93 7d 00 	sts	0x007D, r24
    1306:	1b c0       	rjmp	.+54     	; 0x133e <readPassward+0x5a>
	while(i < pass_length )
	{
		EEPROM_readByte(eeprom_last_location, str4 +i);  /*read byte from eeprom */
    1308:	40 91 7d 00 	lds	r20, 0x007D
    130c:	50 91 7e 00 	lds	r21, 0x007E
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	9b 81       	ldd	r25, Y+3	; 0x03
    131a:	28 0f       	add	r18, r24
    131c:	39 1f       	adc	r19, r25
    131e:	ca 01       	movw	r24, r20
    1320:	b9 01       	movw	r22, r18
    1322:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <EEPROM_readByte>
		eeprom_last_location++;                    /*increment to the next address in eeprom*/
    1326:	80 91 7d 00 	lds	r24, 0x007D
    132a:	90 91 7e 00 	lds	r25, 0x007E
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	90 93 7e 00 	sts	0x007E, r25
    1334:	80 93 7d 00 	sts	0x007D, r24
		i++;
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	89 83       	std	Y+1, r24	; 0x01
}
void readPassward(uint8 *str4)
{
	uint8 i = 0;
	eeprom_last_location = eeprom_first_location; /*let the last location variable in the eeprom = the first location to increment it*/
	while(i < pass_length )
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	85 30       	cpi	r24, 0x05	; 5
    1342:	10 f3       	brcs	.-60     	; 0x1308 <readPassward+0x24>
	{
		EEPROM_readByte(eeprom_last_location, str4 +i);  /*read byte from eeprom */
		eeprom_last_location++;                    /*increment to the next address in eeprom*/
		i++;
	}
	EEPROM_readByte(eeprom_last_location, '\0');   /*put null in the last element of the string*/
    1344:	80 91 7d 00 	lds	r24, 0x007D
    1348:	90 91 7e 00 	lds	r25, 0x007E
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <EEPROM_readByte>
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <creatPassward>:
void creatPassward(uint8 *str1, uint8 *str2)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <creatPassward+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <creatPassward+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	7c 83       	std	Y+4, r23	; 0x04
    1372:	6b 83       	std	Y+3, r22	; 0x03
	while(1)
	{
		newPassward(str1);      /*function to take the password you need set to the system */
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	9a 81       	ldd	r25, Y+2	; 0x02
    1378:	0e 94 62 06 	call	0xcc4	; 0xcc4 <newPassward>
		rePassward(str2);       /*function to re enter the password to confirmation */
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	0e 94 15 07 	call	0xe2a	; 0xe2a <rePassward>
		if(cheakPassward(str1,str2))   /*function to check if the two password are the same */
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	b9 01       	movw	r22, r18
    138e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <cheakPassward>
    1392:	88 23       	and	r24, r24
    1394:	79 f3       	breq	.-34     	; 0x1374 <creatPassward+0x14>
		{
			storPassward(str1);         /*function to stor the password in eeprom*/
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	0e 94 b9 08 	call	0x1172	; 0x1172 <storPassward>
			UART_sendByte(PASS_CREATED);  /*send to hmi that the password created */
    139e:	86 e0       	ldi	r24, 0x06	; 6
    13a0:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
		}
		else
		{
			continue;
		}
	}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <openDoor>:

}
void openDoor(uint8 *str3, uint8 *str4)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <openDoor+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <openDoor+0x8>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	9b 83       	std	Y+3, r25	; 0x03
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	7d 83       	std	Y+5, r23	; 0x05
    13c6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 count = 0;
    13c8:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		currentPasword(str3);          /*function to take the password of the system*/
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	0e 94 c8 07 	call	0xf90	; 0xf90 <currentPasword>
		readPassward(str4);            /*function to read the password from eeprom to confirmation*/
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <readPassward>
		if(cheakPassward(str3,str4))   /*function to check if the password enter from the user is identical with the system password */
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	9b 81       	ldd	r25, Y+3	; 0x03
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	b9 01       	movw	r22, r18
    13e4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <cheakPassward>
    13e8:	88 23       	and	r24, r24
    13ea:	51 f1       	breq	.+84     	; 0x1440 <openDoor+0x8e>
		{

			TimerStartWithMotor();     /*DC-motor ON*/
    13ec:	0e 94 a5 0a 	call	0x154a	; 0x154a <TimerStartWithMotor>
    13f0:	07 c0       	rjmp	.+14     	; 0x1400 <openDoor+0x4e>
			while(g_DC_tick <= 15)
			{
				DcMotor_Rotate(DC_CW,100);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	64 e6       	ldi	r22, 0x64	; 100
    13f6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DcMotor_Rotate>
				UART_sendByte(DOOR_OPEN);  /*send to hmi that the door is open*/
    13fa:	87 e0       	ldi	r24, 0x07	; 7
    13fc:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
		readPassward(str4);            /*function to read the password from eeprom to confirmation*/
		if(cheakPassward(str3,str4))   /*function to check if the password enter from the user is identical with the system password */
		{

			TimerStartWithMotor();     /*DC-motor ON*/
			while(g_DC_tick <= 15)
    1400:	80 91 7b 00 	lds	r24, 0x007B
    1404:	80 31       	cpi	r24, 0x10	; 16
    1406:	a8 f3       	brcs	.-22     	; 0x13f2 <openDoor+0x40>
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <openDoor+0x60>
				UART_sendByte(DOOR_OPEN);  /*send to hmi that the door is open*/

			}
			while(g_DC_tick <= 18)
			{
				DcMotor_Rotate(DC_STOP,0);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DcMotor_Rotate>
			{
				DcMotor_Rotate(DC_CW,100);
				UART_sendByte(DOOR_OPEN);  /*send to hmi that the door is open*/

			}
			while(g_DC_tick <= 18)
    1412:	80 91 7b 00 	lds	r24, 0x007B
    1416:	83 31       	cpi	r24, 0x13	; 19
    1418:	c0 f3       	brcs	.-16     	; 0x140a <openDoor+0x58>
    141a:	07 c0       	rjmp	.+14     	; 0x142a <openDoor+0x78>
				DcMotor_Rotate(DC_STOP,0);
			}
			while(g_DC_tick <= 33)
			{

				DcMotor_Rotate(DC_A_CW,100);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	64 e6       	ldi	r22, 0x64	; 100
    1420:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DcMotor_Rotate>
				UART_sendByte(DOOR_closed);     /*send to hmi that the door is open*/
    1424:	88 e0       	ldi	r24, 0x08	; 8
    1426:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
			}
			while(g_DC_tick <= 18)
			{
				DcMotor_Rotate(DC_STOP,0);
			}
			while(g_DC_tick <= 33)
    142a:	80 91 7b 00 	lds	r24, 0x007B
    142e:	82 32       	cpi	r24, 0x22	; 34
    1430:	a8 f3       	brcs	.-22     	; 0x141c <openDoor+0x6a>

				DcMotor_Rotate(DC_A_CW,100);
				UART_sendByte(DOOR_closed);     /*send to hmi that the door is open*/

			}
			DcMotor_Rotate(DC_STOP,0);   /*dc motor stop*/
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DcMotor_Rotate>
			Timer1_deInit();             /*timer stop*/
    143a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Timer1_deInit>
    143e:	18 c0       	rjmp	.+48     	; 0x1470 <openDoor+0xbe>
			break;
		}
		else                         /*if the two password not the same*/
		{
			if (count == 2)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	82 30       	cpi	r24, 0x02	; 2
    1444:	89 f4       	brne	.+34     	; 0x1468 <openDoor+0xb6>
			{
				/* Bazzer on */
				TimerStartWithBUZZER();
    1446:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TimerStartWithBUZZER>
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <openDoor+0xa4>
				while(g_buzzer_tick <= 60)
				{
					Buzzer_on();
    144c:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
					UART_sendByte(BUZZER_ON);  /*send to hmi that the buzzer is on*/
    1450:	89 e0       	ldi	r24, 0x09	; 9
    1452:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
		{
			if (count == 2)
			{
				/* Bazzer on */
				TimerStartWithBUZZER();
				while(g_buzzer_tick <= 60)
    1456:	80 91 7a 00 	lds	r24, 0x007A
    145a:	8d 33       	cpi	r24, 0x3D	; 61
    145c:	b8 f3       	brcs	.-18     	; 0x144c <openDoor+0x9a>
				{
					Buzzer_on();
					UART_sendByte(BUZZER_ON);  /*send to hmi that the buzzer is on*/

				}
				Buzzer_off();                   /*send to hmi that the buzzer is off*/
    145e:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
				Timer1_deInit();
    1462:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Timer1_deInit>
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <openDoor+0xbe>

				break;
			}
			else
			{
				count++;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	ad cf       	rjmp	.-166    	; 0x13ca <openDoor+0x18>
			}
		}

	}

}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <changePassward>:

void changePassward(uint8 *str1, uint8 *str2, uint8 *str3, uint8 *str4)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	29 97       	sbiw	r28, 0x09	; 9
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	9b 83       	std	Y+3, r25	; 0x03
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	7d 83       	std	Y+5, r23	; 0x05
    149a:	6c 83       	std	Y+4, r22	; 0x04
    149c:	5f 83       	std	Y+7, r21	; 0x07
    149e:	4e 83       	std	Y+6, r20	; 0x06
    14a0:	39 87       	std	Y+9, r19	; 0x09
    14a2:	28 87       	std	Y+8, r18	; 0x08
	uint8 count = 0;
    14a4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		currentPasword(str3);                 /*function to take the password of the system*/
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	9f 81       	ldd	r25, Y+7	; 0x07
    14aa:	0e 94 c8 07 	call	0xf90	; 0xf90 <currentPasword>
		readPassward(str4);                   /*function to read the password from eeprom to confirmation*/
    14ae:	88 85       	ldd	r24, Y+8	; 0x08
    14b0:	99 85       	ldd	r25, Y+9	; 0x09
    14b2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <readPassward>
		if(cheakPassward(str4, str3))         /*function to check if the password enter from the user is identical with the system password */
    14b6:	88 85       	ldd	r24, Y+8	; 0x08
    14b8:	99 85       	ldd	r25, Y+9	; 0x09
    14ba:	2e 81       	ldd	r18, Y+6	; 0x06
    14bc:	3f 81       	ldd	r19, Y+7	; 0x07
    14be:	b9 01       	movw	r22, r18
    14c0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <cheakPassward>
    14c4:	88 23       	and	r24, r24
    14c6:	41 f0       	breq	.+16     	; 0x14d8 <changePassward+0x58>
		{
			creatPassward(str1,str2);          /*function to create the new password*/
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	2c 81       	ldd	r18, Y+4	; 0x04
    14ce:	3d 81       	ldd	r19, Y+5	; 0x05
    14d0:	b9 01       	movw	r22, r18
    14d2:	0e 94 b0 09 	call	0x1360	; 0x1360 <creatPassward>
    14d6:	18 c0       	rjmp	.+48     	; 0x1508 <changePassward+0x88>
			break;
		}
		else
		{
			if (count == 2)
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	89 f4       	brne	.+34     	; 0x1500 <changePassward+0x80>
			{
				/* Bazzer on */
				TimerStartWithBUZZER();
    14de:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TimerStartWithBUZZER>
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <changePassward+0x6e>
				while(g_buzzer_tick <= 60)
				{
					Buzzer_on();
    14e4:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
					UART_sendByte(BUZZER_ON);
    14e8:	89 e0       	ldi	r24, 0x09	; 9
    14ea:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
		{
			if (count == 2)
			{
				/* Bazzer on */
				TimerStartWithBUZZER();
				while(g_buzzer_tick <= 60)
    14ee:	80 91 7a 00 	lds	r24, 0x007A
    14f2:	8d 33       	cpi	r24, 0x3D	; 61
    14f4:	b8 f3       	brcs	.-18     	; 0x14e4 <changePassward+0x64>
				{
					Buzzer_on();
					UART_sendByte(BUZZER_ON);

				}
				Buzzer_off();
    14f6:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
				Timer1_deInit();
    14fa:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Timer1_deInit>
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <changePassward+0x88>

				break;
			}
			else
			{
				count++;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	cf cf       	rjmp	.-98     	; 0x14a6 <changePassward+0x26>

				continue;
			}
		}
	}
}
    1508:	29 96       	adiw	r28, 0x09	; 9
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <timer1_DC_processe>:
void timer1_DC_processe(void)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	g_DC_tick++;
    1522:	80 91 7b 00 	lds	r24, 0x007B
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	80 93 7b 00 	sts	0x007B, r24
}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <timer1_buzzer_processe>:
void timer1_buzzer_processe(void)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	g_buzzer_tick++;
    153a:	80 91 7a 00 	lds	r24, 0x007A
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 7a 00 	sts	0x007A, r24
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <TimerStartWithMotor>:

void TimerStartWithMotor(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	Timer1_Comp_setCallBack(timer1_DC_processe); /*call back function*/
    1552:	8d e8       	ldi	r24, 0x8D	; 141
    1554:	9a e0       	ldi	r25, 0x0A	; 10
    1556:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Timer1_Comp_setCallBack>
	Timer1_init(&timerConfig);                   /*initialize the timer*/
    155a:	88 e6       	ldi	r24, 0x68	; 104
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 36 0c 	call	0x186c	; 0x186c <Timer1_init>
	DcMotor_Init();                              /*initialize the dc motor*/
    1562:	0e 94 4b 0b 	call	0x1696	; 0x1696 <DcMotor_Init>
	g_DC_tick = 0;
    1566:	10 92 7b 00 	sts	0x007B, r1

}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <TimerStartWithBUZZER>:
void TimerStartWithBUZZER(void)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	Timer1_Comp_setCallBack(timer1_buzzer_processe);     /*call back function*/
    1578:	89 e9       	ldi	r24, 0x99	; 153
    157a:	9a e0       	ldi	r25, 0x0A	; 10
    157c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Timer1_Comp_setCallBack>
	Timer1_init(&timerConfig);                           /*initialize the timer*/
    1580:	88 e6       	ldi	r24, 0x68	; 104
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 36 0c 	call	0x186c	; 0x186c <Timer1_init>
	g_buzzer_tick = 0;                                   /*initialize the dc motor*/
    1588:	10 92 7a 00 	sts	0x007A, r1
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <main>:
uint8 newPass[pass_length];
uint8 rePass[pass_length];
uint8 currentPass[pass_length];
uint8 cheakPass[pass_length];
int main(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	64 97       	sbiw	r28, 0x14	; 20
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
	SREG  |= (1<<7);   /*enable interrupt*/
    15a6:	af e5       	ldi	r26, 0x5F	; 95
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ef e5       	ldi	r30, 0x5F	; 95
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	80 68       	ori	r24, 0x80	; 128
    15b2:	8c 93       	st	X, r24
	UART_ConfigType UARTConfig = {UART_8_BIT_DATA, UART_PARITY_DISABLED,UART_1_BIT,9600}; /*configuration of uart*/
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	9c 87       	std	Y+12, r25	; 0x0c
    15ba:	8b 87       	std	Y+11, r24	; 0x0b
    15bc:	e3 e7       	ldi	r30, 0x73	; 115
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	fe 87       	std	Y+14, r31	; 0x0e
    15c2:	ed 87       	std	Y+13, r30	; 0x0d
    15c4:	f7 e0       	ldi	r31, 0x07	; 7
    15c6:	ff 87       	std	Y+15, r31	; 0x0f
    15c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    15ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    15cc:	00 80       	ld	r0, Z
    15ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	9e 87       	std	Y+14, r25	; 0x0e
    15d6:	8d 87       	std	Y+13, r24	; 0x0d
    15d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    15da:	fc 85       	ldd	r31, Y+12	; 0x0c
    15dc:	00 82       	st	Z, r0
    15de:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	9c 87       	std	Y+12, r25	; 0x0c
    15e6:	8b 87       	std	Y+11, r24	; 0x0b
    15e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ea:	91 50       	subi	r25, 0x01	; 1
    15ec:	9f 87       	std	Y+15, r25	; 0x0f
    15ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    15f0:	ee 23       	and	r30, r30
    15f2:	51 f7       	brne	.-44     	; 0x15c8 <main+0x36>
	UART_init(&UARTConfig);        /*uart initialization*/
    15f4:	ce 01       	movw	r24, r28
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	0e 94 47 11 	call	0x228e	; 0x228e <UART_init>

	TWI_ConfigType twiConfig = {0b00000010,400};  /*configuration of i2c*/
    15fc:	ce 01       	movw	r24, r28
    15fe:	08 96       	adiw	r24, 0x08	; 8
    1600:	99 8b       	std	Y+17, r25	; 0x11
    1602:	88 8b       	std	Y+16, r24	; 0x10
    1604:	e0 e7       	ldi	r30, 0x70	; 112
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	fb 8b       	std	Y+19, r31	; 0x13
    160a:	ea 8b       	std	Y+18, r30	; 0x12
    160c:	f3 e0       	ldi	r31, 0x03	; 3
    160e:	fc 8b       	std	Y+20, r31	; 0x14
    1610:	ea 89       	ldd	r30, Y+18	; 0x12
    1612:	fb 89       	ldd	r31, Y+19	; 0x13
    1614:	00 80       	ld	r0, Z
    1616:	8a 89       	ldd	r24, Y+18	; 0x12
    1618:	9b 89       	ldd	r25, Y+19	; 0x13
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	9b 8b       	std	Y+19, r25	; 0x13
    161e:	8a 8b       	std	Y+18, r24	; 0x12
    1620:	e8 89       	ldd	r30, Y+16	; 0x10
    1622:	f9 89       	ldd	r31, Y+17	; 0x11
    1624:	00 82       	st	Z, r0
    1626:	88 89       	ldd	r24, Y+16	; 0x10
    1628:	99 89       	ldd	r25, Y+17	; 0x11
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	99 8b       	std	Y+17, r25	; 0x11
    162e:	88 8b       	std	Y+16, r24	; 0x10
    1630:	9c 89       	ldd	r25, Y+20	; 0x14
    1632:	91 50       	subi	r25, 0x01	; 1
    1634:	9c 8b       	std	Y+20, r25	; 0x14
    1636:	ec 89       	ldd	r30, Y+20	; 0x14
    1638:	ee 23       	and	r30, r30
    163a:	51 f7       	brne	.-44     	; 0x1610 <main+0x7e>
	TWI_init(&twiConfig);                       /*initialization of i2c*/
    163c:	ce 01       	movw	r24, r28
    163e:	08 96       	adiw	r24, 0x08	; 8
    1640:	0e 94 9d 10 	call	0x213a	; 0x213a <TWI_init>

	Buzzer_init();   /*initialization of buzzer*/
    1644:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>


	while(UART_recieveByte() != IAM_READY){}  /*wait until the hmi ready */
    1648:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_recieveByte>
    164c:	88 23       	and	r24, r24
    164e:	e1 f7       	brne	.-8      	; 0x1648 <main+0xb6>
	creatPassward(newPass, rePass); /*create the password of the system*/
    1650:	84 e8       	ldi	r24, 0x84	; 132
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	23 e9       	ldi	r18, 0x93	; 147
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	b9 01       	movw	r22, r18
    165a:	0e 94 b0 09 	call	0x1360	; 0x1360 <creatPassward>
	while(1)
	{
		UART_sendByte(HOME_SCREEN);
    165e:	85 e0       	ldi	r24, 0x05	; 5
    1660:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
		if(home_screen() == '+')
    1664:	0e 94 cc 05 	call	0xb98	; 0xb98 <home_screen>
    1668:	8b 32       	cpi	r24, 0x2B	; 43
    166a:	41 f4       	brne	.+16     	; 0x167c <main+0xea>
		{
			openDoor(currentPass,cheakPass );
    166c:	89 e8       	ldi	r24, 0x89	; 137
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	2e e8       	ldi	r18, 0x8E	; 142
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	b9 01       	movw	r22, r18
    1676:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <openDoor>
    167a:	f1 cf       	rjmp	.-30     	; 0x165e <main+0xcc>
		}
		else
		{
			changePassward(newPass, rePass, currentPass, cheakPass);
    167c:	84 e8       	ldi	r24, 0x84	; 132
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	23 e9       	ldi	r18, 0x93	; 147
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	49 e8       	ldi	r20, 0x89	; 137
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	ee e8       	ldi	r30, 0x8E	; 142
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	b9 01       	movw	r22, r18
    168e:	9f 01       	movw	r18, r30
    1690:	0e 94 40 0a 	call	0x1480	; 0x1480 <changePassward>
    1694:	e4 cf       	rjmp	.-56     	; 0x165e <main+0xcc>

00001696 <DcMotor_Init>:
 *[ARG]            :  No ARG
 *
 * [Return]        : Void
 */
void DcMotor_Init(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PINA_ID,PIN_OUTPUT); //set the Direction of DC motor PIN A as OUTPUT
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PINB_ID,PIN_OUTPUT); //set the Direction of DC motor PIN B as OUTPUT
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <GPIO_setupPinDirection>
	/* Dc Motor is Stop At The First */
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINA_ID,LOGIC_LOW);
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINB_ID,LOGIC_LOW);
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
}
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <DcMotor_Rotate>:
 *                       This Arg Indicate To The Speed of DC MOtor.
 *
 * [Return]        : Void
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DcMotor_Rotate+0x6>
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	6a 83       	std	Y+2, r22	; 0x02
	if(state == DC_STOP)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	88 23       	and	r24, r24
    16de:	59 f4       	brne	.+22     	; 0x16f6 <DcMotor_Rotate+0x2a>
	{
		/* Stop the DC Motor By set PINA and PINB = 0*/
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINA_ID,LOGIC_LOW);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINB_ID,LOGIC_LOW);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
    16f4:	1b c0       	rjmp	.+54     	; 0x172c <DcMotor_Rotate+0x60>
	}
	else if(state == DC_CW)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	59 f4       	brne	.+22     	; 0x1712 <DcMotor_Rotate+0x46>
	{
		/* the DC Motor rotate CW By set PINA = 0 and PINB = 1*/

		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINA_ID,LOGIC_LOW);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINB_ID,LOGIC_HIGH);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	41 e0       	ldi	r20, 0x01	; 1
    170c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
    1710:	0d c0       	rjmp	.+26     	; 0x172c <DcMotor_Rotate+0x60>
	}
	else if(state == DC_A_CW)
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	51 f4       	brne	.+20     	; 0x172c <DcMotor_Rotate+0x60>
	{
		/* the DC Motor rotate A_CW By set PINA = 1 and PINB = 0*/

		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINA_ID,LOGIC_HIGH);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PINB_ID,LOGIC_LOW);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <GPIO_writePin>
	}
	/* Calculate the duty cycle to control the  motor speed */
	 g_DutyCycle = (uint8)((uint16)0xFF * speed / 100);
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	48 2f       	mov	r20, r24
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	ca 01       	movw	r24, r20
    1734:	9c 01       	movw	r18, r24
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	c9 01       	movw	r24, r18
    173c:	96 95       	lsr	r25
    173e:	98 2f       	mov	r25, r24
    1740:	88 27       	eor	r24, r24
    1742:	97 95       	ror	r25
    1744:	87 95       	ror	r24
    1746:	82 1b       	sub	r24, r18
    1748:	93 0b       	sbc	r25, r19
    174a:	84 0f       	add	r24, r20
    174c:	95 1f       	adc	r25, r21
    174e:	24 e6       	ldi	r18, 0x64	; 100
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	b9 01       	movw	r22, r18
    1754:	0e 94 42 12 	call	0x2484	; 0x2484 <__udivmodhi4>
    1758:	cb 01       	movw	r24, r22
    175a:	80 93 7f 00 	sts	0x007F, r24
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <PWM_Timer0_Init>:
 *                       This Arg Indicate To The duty cycle .
 *
 * [Return]        : Void
 */
void PWM_Timer0_Init(uint8 set_duty_cycle)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1774:	e2 e5       	ldi	r30, 0x52	; 82
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    177a:	ec e5       	ldi	r30, 0x5C	; 92
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1782:	a7 e3       	ldi	r26, 0x37	; 55
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e7 e3       	ldi	r30, 0x37	; 55
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	88 60       	ori	r24, 0x08	; 8
    178e:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1790:	e3 e5       	ldi	r30, 0x53	; 83
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8a e6       	ldi	r24, 0x6A	; 106
    1796:	80 83       	st	Z, r24

}
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <__vector_7>:

static void (*g_callBackPtr)(void) = NULL_PTR;
static void (*g_callBackPtr2)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    17a0:	1f 92       	push	r1
    17a2:	0f 92       	push	r0
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	0f 92       	push	r0
    17a8:	11 24       	eor	r1, r1
    17aa:	2f 93       	push	r18
    17ac:	3f 93       	push	r19
    17ae:	4f 93       	push	r20
    17b0:	5f 93       	push	r21
    17b2:	6f 93       	push	r22
    17b4:	7f 93       	push	r23
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	ef 93       	push	r30
    17c0:	ff 93       	push	r31
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    17ca:	80 91 80 00 	lds	r24, 0x0080
    17ce:	90 91 81 00 	lds	r25, 0x0081
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	29 f0       	breq	.+10     	; 0x17e0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17d6:	e0 91 80 00 	lds	r30, 0x0080
    17da:	f0 91 81 00 	lds	r31, 0x0081
    17de:	09 95       	icall
	}
}
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	2f 93       	push	r18
    1812:	3f 93       	push	r19
    1814:	4f 93       	push	r20
    1816:	5f 93       	push	r21
    1818:	6f 93       	push	r22
    181a:	7f 93       	push	r23
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	af 93       	push	r26
    1822:	bf 93       	push	r27
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1830:	80 91 82 00 	lds	r24, 0x0082
    1834:	90 91 83 00 	lds	r25, 0x0083
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	29 f0       	breq	.+10     	; 0x1846 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    183c:	e0 91 82 00 	lds	r30, 0x0082
    1840:	f0 91 83 00 	lds	r31, 0x0083
    1844:	09 95       	icall
	}
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <Timer1_init+0x6>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
	/*for compare mode*/
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    187a:	ef e4       	ldi	r30, 0x4F	; 79
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8c e0       	ldi	r24, 0x0C	; 12
    1880:	80 83       	st	Z, r24
		TCNT1 = Config_Ptr->initial_value;
    1882:	ac e4       	ldi	r26, 0x4C	; 76
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e9 81       	ldd	r30, Y+1	; 0x01
    1888:	fa 81       	ldd	r31, Y+2	; 0x02
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	9c 93       	st	X, r25
    1892:	8e 93       	st	-X, r24
		if((Config_Ptr->mode) == T1_COMPER_MODE)
    1894:	e9 81       	ldd	r30, Y+1	; 0x01
    1896:	fa 81       	ldd	r31, Y+2	; 0x02
    1898:	85 81       	ldd	r24, Z+5	; 0x05
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	09 f5       	brne	.+66     	; 0x18e0 <Timer1_init+0x74>
		{
			OCR1A = Config_Ptr->compare_value;
    189e:	aa e4       	ldi	r26, 0x4A	; 74
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e9 81       	ldd	r30, Y+1	; 0x01
    18a4:	fa 81       	ldd	r31, Y+2	; 0x02
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	9c 93       	st	X, r25
    18ae:	8e 93       	st	-X, r24
		TIMSK = (1 << OCIE1A);
    18b0:	e9 e5       	ldi	r30, 0x59	; 89
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 e1       	ldi	r24, 0x10	; 16
    18b6:	80 83       	st	Z, r24
		TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode)<<WGM12);
    18b8:	ae e4       	ldi	r26, 0x4E	; 78
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e9 81       	ldd	r30, Y+1	; 0x01
    18be:	fa 81       	ldd	r31, Y+2	; 0x02
    18c0:	84 81       	ldd	r24, Z+4	; 0x04
    18c2:	28 2f       	mov	r18, r24
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	85 81       	ldd	r24, Z+5	; 0x05
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	82 2b       	or	r24, r18
    18dc:	8c 93       	st	X, r24
    18de:	17 c0       	rjmp	.+46     	; 0x190e <Timer1_init+0xa2>

		}
		else
		{
		TIMSK = (1 << TOIE1);
    18e0:	e9 e5       	ldi	r30, 0x59	; 89
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	84 e0       	ldi	r24, 0x04	; 4
    18e6:	80 83       	st	Z, r24
		TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode)<<WGM12);
    18e8:	ae e4       	ldi	r26, 0x4E	; 78
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e9 81       	ldd	r30, Y+1	; 0x01
    18ee:	fa 81       	ldd	r31, Y+2	; 0x02
    18f0:	84 81       	ldd	r24, Z+4	; 0x04
    18f2:	28 2f       	mov	r18, r24
    18f4:	e9 81       	ldd	r30, Y+1	; 0x01
    18f6:	fa 81       	ldd	r31, Y+2	; 0x02
    18f8:	85 81       	ldd	r24, Z+5	; 0x05
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	82 2b       	or	r24, r18
    190c:	8c 93       	st	X, r24
		}
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <Timer1_deInit>:
void Timer1_deInit(void)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0xF8;
    1920:	ae e4       	ldi	r26, 0x4E	; 78
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	ee e4       	ldi	r30, 0x4E	; 78
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	88 7f       	andi	r24, 0xF8	; 248
    192c:	8c 93       	st	X, r24
}
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <Timer1_Comp_setCallBack>:

void Timer1_Comp_setCallBack(void(*a_ptr)(void))
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <Timer1_Comp_setCallBack+0x6>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	90 93 81 00 	sts	0x0081, r25
    194a:	80 93 80 00 	sts	0x0080, r24
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <Timer1_NORMAL_setCallBack>:
void Timer1_NORMAL_setCallBack(void(*a_ptr)(void))
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <Timer1_NORMAL_setCallBack+0x6>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	90 93 83 00 	sts	0x0083, r25
    196e:	80 93 82 00 	sts	0x0082, r24
}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"
#include "std_types.h"
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <EEPROM_writeByte+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <EEPROM_writeByte+0x8>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    198e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1992:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    1996:	88 30       	cpi	r24, 0x08	; 8
    1998:	11 f0       	breq	.+4      	; 0x199e <EEPROM_writeByte+0x22>
        return ERROR;
    199a:	1c 82       	std	Y+4, r1	; 0x04
    199c:	28 c0       	rjmp	.+80     	; 0x19ee <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	80 70       	andi	r24, 0x00	; 0
    19a4:	97 70       	andi	r25, 0x07	; 7
    19a6:	88 0f       	add	r24, r24
    19a8:	89 2f       	mov	r24, r25
    19aa:	88 1f       	adc	r24, r24
    19ac:	99 0b       	sbc	r25, r25
    19ae:	91 95       	neg	r25
    19b0:	80 6a       	ori	r24, 0xA0	; 160
    19b2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    19b6:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    19ba:	88 31       	cpi	r24, 0x18	; 24
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <EEPROM_writeByte+0x46>
        return ERROR; 
    19be:	1c 82       	std	Y+4, r1	; 0x04
    19c0:	16 c0       	rjmp	.+44     	; 0x19ee <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    19c8:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    19cc:	88 32       	cpi	r24, 0x28	; 40
    19ce:	11 f0       	breq	.+4      	; 0x19d4 <EEPROM_writeByte+0x58>
        return ERROR;
    19d0:	1c 82       	std	Y+4, r1	; 0x04
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    19da:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    19de:	88 32       	cpi	r24, 0x28	; 40
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <EEPROM_writeByte+0x6a>
        return ERROR;
    19e2:	1c 82       	std	Y+4, r1	; 0x04
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    19e6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_stop>
	
    return SUCCESS;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8c 83       	std	Y+4, r24	; 0x04
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <EEPROM_readByte+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <EEPROM_readByte+0x8>
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	7c 83       	std	Y+4, r23	; 0x04
    1a12:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a14:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a18:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    1a1c:	88 30       	cpi	r24, 0x08	; 8
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <EEPROM_readByte+0x26>
        return ERROR;
    1a20:	1d 82       	std	Y+5, r1	; 0x05
    1a22:	44 c0       	rjmp	.+136    	; 0x1aac <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	80 70       	andi	r24, 0x00	; 0
    1a2a:	97 70       	andi	r25, 0x07	; 7
    1a2c:	88 0f       	add	r24, r24
    1a2e:	89 2f       	mov	r24, r25
    1a30:	88 1f       	adc	r24, r24
    1a32:	99 0b       	sbc	r25, r25
    1a34:	91 95       	neg	r25
    1a36:	80 6a       	ori	r24, 0xA0	; 160
    1a38:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a3c:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    1a40:	88 31       	cpi	r24, 0x18	; 24
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <EEPROM_readByte+0x4a>
        return ERROR;
    1a44:	1d 82       	std	Y+5, r1	; 0x05
    1a46:	32 c0       	rjmp	.+100    	; 0x1aac <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a4e:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    1a52:	88 32       	cpi	r24, 0x28	; 40
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <EEPROM_readByte+0x5c>
        return ERROR;
    1a56:	1d 82       	std	Y+5, r1	; 0x05
    1a58:	29 c0       	rjmp	.+82     	; 0x1aac <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1a5a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1a5e:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    1a62:	80 31       	cpi	r24, 0x10	; 16
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <EEPROM_readByte+0x6c>
        return ERROR;
    1a66:	1d 82       	std	Y+5, r1	; 0x05
    1a68:	21 c0       	rjmp	.+66     	; 0x1aac <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	80 70       	andi	r24, 0x00	; 0
    1a70:	97 70       	andi	r25, 0x07	; 7
    1a72:	88 0f       	add	r24, r24
    1a74:	89 2f       	mov	r24, r25
    1a76:	88 1f       	adc	r24, r24
    1a78:	99 0b       	sbc	r25, r25
    1a7a:	91 95       	neg	r25
    1a7c:	81 6a       	ori	r24, 0xA1	; 161
    1a7e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1a82:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    1a86:	80 34       	cpi	r24, 0x40	; 64
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <EEPROM_readByte+0x90>
        return ERROR;
    1a8a:	1d 82       	std	Y+5, r1	; 0x05
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1a8e:	0e 94 25 11 	call	0x224a	; 0x224a <TWI_readByteWithNACK>
    1a92:	eb 81       	ldd	r30, Y+3	; 0x03
    1a94:	fc 81       	ldd	r31, Y+4	; 0x04
    1a96:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1a98:	0e 94 38 11 	call	0x2270	; 0x2270 <TWI_getStatus>
    1a9c:	88 35       	cpi	r24, 0x58	; 88
    1a9e:	11 f0       	breq	.+4      	; 0x1aa4 <EEPROM_readByte+0xa6>
        return ERROR;
    1aa0:	1d 82       	std	Y+5, r1	; 0x05
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1aa4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_stop>

    return SUCCESS;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <GPIO_setupPinDirection+0x6>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <GPIO_setupPinDirection+0x8>
    1ac6:	0f 92       	push	r0
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	6a 83       	std	Y+2, r22	; 0x02
    1ad0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	88 30       	cpi	r24, 0x08	; 8
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <GPIO_setupPinDirection+0x1c>
    1ad8:	d5 c0       	rjmp	.+426    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <GPIO_setupPinDirection+0x24>
    1ae0:	d1 c0       	rjmp	.+418    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3d 83       	std	Y+5, r19	; 0x05
    1aea:	2c 83       	std	Y+4, r18	; 0x04
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	91 05       	cpc	r25, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <GPIO_setupPinDirection+0x3a>
    1af6:	43 c0       	rjmp	.+134    	; 0x1b7e <GPIO_setupPinDirection+0xc0>
    1af8:	2c 81       	ldd	r18, Y+4	; 0x04
    1afa:	3d 81       	ldd	r19, Y+5	; 0x05
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <GPIO_setupPinDirection+0x4e>
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	9d 81       	ldd	r25, Y+5	; 0x05
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	71 f0       	breq	.+28     	; 0x1b26 <GPIO_setupPinDirection+0x68>
    1b0a:	bc c0       	rjmp	.+376    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
    1b0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <GPIO_setupPinDirection+0x5a>
    1b16:	5f c0       	rjmp	.+190    	; 0x1bd6 <GPIO_setupPinDirection+0x118>
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	91 05       	cpc	r25, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <GPIO_setupPinDirection+0x66>
    1b22:	85 c0       	rjmp	.+266    	; 0x1c2e <GPIO_setupPinDirection+0x170>
    1b24:	af c0       	rjmp	.+350    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	a1 f4       	brne	.+40     	; 0x1b54 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b2c:	aa e3       	ldi	r26, 0x3A	; 58
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ea e3       	ldi	r30, 0x3A	; 58
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <GPIO_setupPinDirection+0x8c>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <GPIO_setupPinDirection+0x88>
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	98 c0       	rjmp	.+304    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b54:	aa e3       	ldi	r26, 0x3A	; 58
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ea e3       	ldi	r30, 0x3A	; 58
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <GPIO_setupPinDirection+0xb4>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <GPIO_setupPinDirection+0xb0>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	83 c0       	rjmp	.+262    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	a1 f4       	brne	.+40     	; 0x1bac <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b84:	a7 e3       	ldi	r26, 0x37	; 55
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e7 e3       	ldi	r30, 0x37	; 55
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <GPIO_setupPinDirection+0xe4>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <GPIO_setupPinDirection+0xe0>
    1ba6:	84 2b       	or	r24, r20
    1ba8:	8c 93       	st	X, r24
    1baa:	6c c0       	rjmp	.+216    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1bac:	a7 e3       	ldi	r26, 0x37	; 55
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e7 e3       	ldi	r30, 0x37	; 55
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <GPIO_setupPinDirection+0x10c>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	0a 94       	dec	r0
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <GPIO_setupPinDirection+0x108>
    1bce:	80 95       	com	r24
    1bd0:	84 23       	and	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	57 c0       	rjmp	.+174    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	a1 f4       	brne	.+40     	; 0x1c04 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bdc:	a4 e3       	ldi	r26, 0x34	; 52
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e4 e3       	ldi	r30, 0x34	; 52
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <GPIO_setupPinDirection+0x13c>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <GPIO_setupPinDirection+0x138>
    1bfe:	84 2b       	or	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	40 c0       	rjmp	.+128    	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c04:	a4 e3       	ldi	r26, 0x34	; 52
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e4 e3       	ldi	r30, 0x34	; 52
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <GPIO_setupPinDirection+0x164>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <GPIO_setupPinDirection+0x160>
    1c26:	80 95       	com	r24
    1c28:	84 23       	and	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	2b c0       	rjmp	.+86     	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	a1 f4       	brne	.+40     	; 0x1c5c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c34:	a1 e3       	ldi	r26, 0x31	; 49
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e1 e3       	ldi	r30, 0x31	; 49
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <GPIO_setupPinDirection+0x194>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <GPIO_setupPinDirection+0x190>
    1c56:	84 2b       	or	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c5c:	a1 e3       	ldi	r26, 0x31	; 49
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e1 e3       	ldi	r30, 0x31	; 49
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <GPIO_setupPinDirection+0x1bc>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <GPIO_setupPinDirection+0x1b8>
    1c7e:	80 95       	com	r24
    1c80:	84 23       	and	r24, r20
    1c82:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <GPIO_writePin+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <GPIO_writePin+0x8>
    1c9c:	0f 92       	push	r0
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	6a 83       	std	Y+2, r22	; 0x02
    1ca6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <GPIO_writePin+0x1c>
    1cae:	d5 c0       	rjmp	.+426    	; 0x1e5a <GPIO_writePin+0x1c6>
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	84 30       	cpi	r24, 0x04	; 4
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <GPIO_writePin+0x24>
    1cb6:	d1 c0       	rjmp	.+418    	; 0x1e5a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3d 83       	std	Y+5, r19	; 0x05
    1cc0:	2c 83       	std	Y+4, r18	; 0x04
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <GPIO_writePin+0x3a>
    1ccc:	43 c0       	rjmp	.+134    	; 0x1d54 <GPIO_writePin+0xc0>
    1cce:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <GPIO_writePin+0x4e>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	71 f0       	breq	.+28     	; 0x1cfc <GPIO_writePin+0x68>
    1ce0:	bc c0       	rjmp	.+376    	; 0x1e5a <GPIO_writePin+0x1c6>
    1ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <GPIO_writePin+0x5a>
    1cec:	5f c0       	rjmp	.+190    	; 0x1dac <GPIO_writePin+0x118>
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <GPIO_writePin+0x66>
    1cf8:	85 c0       	rjmp	.+266    	; 0x1e04 <GPIO_writePin+0x170>
    1cfa:	af c0       	rjmp	.+350    	; 0x1e5a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	a1 f4       	brne	.+40     	; 0x1d2a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d02:	ab e3       	ldi	r26, 0x3B	; 59
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	eb e3       	ldi	r30, 0x3B	; 59
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_writePin+0x8c>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_writePin+0x88>
    1d24:	84 2b       	or	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	98 c0       	rjmp	.+304    	; 0x1e5a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d2a:	ab e3       	ldi	r26, 0x3B	; 59
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	eb e3       	ldi	r30, 0x3B	; 59
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <GPIO_writePin+0xb4>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <GPIO_writePin+0xb0>
    1d4c:	80 95       	com	r24
    1d4e:	84 23       	and	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	83 c0       	rjmp	.+262    	; 0x1e5a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	a1 f4       	brne	.+40     	; 0x1d82 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d5a:	a8 e3       	ldi	r26, 0x38	; 56
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e8 e3       	ldi	r30, 0x38	; 56
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_writePin+0xe4>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_writePin+0xe0>
    1d7c:	84 2b       	or	r24, r20
    1d7e:	8c 93       	st	X, r24
    1d80:	6c c0       	rjmp	.+216    	; 0x1e5a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d82:	a8 e3       	ldi	r26, 0x38	; 56
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e8 e3       	ldi	r30, 0x38	; 56
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <GPIO_writePin+0x10c>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <GPIO_writePin+0x108>
    1da4:	80 95       	com	r24
    1da6:	84 23       	and	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	57 c0       	rjmp	.+174    	; 0x1e5a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	a1 f4       	brne	.+40     	; 0x1dda <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1db2:	a5 e3       	ldi	r26, 0x35	; 53
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e5 e3       	ldi	r30, 0x35	; 53
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <GPIO_writePin+0x13c>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <GPIO_writePin+0x138>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	40 c0       	rjmp	.+128    	; 0x1e5a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1dda:	a5 e3       	ldi	r26, 0x35	; 53
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e3       	ldi	r30, 0x35	; 53
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <GPIO_writePin+0x164>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <GPIO_writePin+0x160>
    1dfc:	80 95       	com	r24
    1dfe:	84 23       	and	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	2b c0       	rjmp	.+86     	; 0x1e5a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	a1 f4       	brne	.+40     	; 0x1e32 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e0a:	a2 e3       	ldi	r26, 0x32	; 50
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e2 e3       	ldi	r30, 0x32	; 50
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <GPIO_writePin+0x194>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <GPIO_writePin+0x190>
    1e2c:	84 2b       	or	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e32:	a2 e3       	ldi	r26, 0x32	; 50
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e2 e3       	ldi	r30, 0x32	; 50
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <GPIO_writePin+0x1bc>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <GPIO_writePin+0x1b8>
    1e54:	80 95       	com	r24
    1e56:	84 23       	and	r24, r20
    1e58:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <GPIO_readPin+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <GPIO_readPin+0x8>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e7c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	88 30       	cpi	r24, 0x08	; 8
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <GPIO_readPin+0x1c>
    1e84:	84 c0       	rjmp	.+264    	; 0x1f8e <GPIO_readPin+0x124>
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	84 30       	cpi	r24, 0x04	; 4
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <GPIO_readPin+0x24>
    1e8c:	80 c0       	rjmp	.+256    	; 0x1f8e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3d 83       	std	Y+5, r19	; 0x05
    1e96:	2c 83       	std	Y+4, r18	; 0x04
    1e98:	4c 81       	ldd	r20, Y+4	; 0x04
    1e9a:	5d 81       	ldd	r21, Y+5	; 0x05
    1e9c:	41 30       	cpi	r20, 0x01	; 1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	79 f1       	breq	.+94     	; 0x1f00 <GPIO_readPin+0x96>
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	34 f4       	brge	.+12     	; 0x1eb8 <GPIO_readPin+0x4e>
    1eac:	2c 81       	ldd	r18, Y+4	; 0x04
    1eae:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb0:	21 15       	cp	r18, r1
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	69 f0       	breq	.+26     	; 0x1ed0 <GPIO_readPin+0x66>
    1eb6:	6b c0       	rjmp	.+214    	; 0x1f8e <GPIO_readPin+0x124>
    1eb8:	4c 81       	ldd	r20, Y+4	; 0x04
    1eba:	5d 81       	ldd	r21, Y+5	; 0x05
    1ebc:	42 30       	cpi	r20, 0x02	; 2
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	b9 f1       	breq	.+110    	; 0x1f30 <GPIO_readPin+0xc6>
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	91 05       	cpc	r25, r1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <GPIO_readPin+0x64>
    1ecc:	49 c0       	rjmp	.+146    	; 0x1f60 <GPIO_readPin+0xf6>
    1ece:	5f c0       	rjmp	.+190    	; 0x1f8e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ed0:	e9 e3       	ldi	r30, 0x39	; 57
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a9 01       	movw	r20, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <GPIO_readPin+0x7e>
    1ee4:	55 95       	asr	r21
    1ee6:	47 95       	ror	r20
    1ee8:	8a 95       	dec	r24
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <GPIO_readPin+0x7a>
    1eec:	ca 01       	movw	r24, r20
    1eee:	81 70       	andi	r24, 0x01	; 1
    1ef0:	90 70       	andi	r25, 0x00	; 0
    1ef2:	88 23       	and	r24, r24
    1ef4:	19 f0       	breq	.+6      	; 0x1efc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	49 c0       	rjmp	.+146    	; 0x1f8e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1efc:	19 82       	std	Y+1, r1	; 0x01
    1efe:	47 c0       	rjmp	.+142    	; 0x1f8e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f00:	e6 e3       	ldi	r30, 0x36	; 54
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	a9 01       	movw	r20, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <GPIO_readPin+0xae>
    1f14:	55 95       	asr	r21
    1f16:	47 95       	ror	r20
    1f18:	8a 95       	dec	r24
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <GPIO_readPin+0xaa>
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	81 70       	andi	r24, 0x01	; 1
    1f20:	90 70       	andi	r25, 0x00	; 0
    1f22:	88 23       	and	r24, r24
    1f24:	19 f0       	breq	.+6      	; 0x1f2c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	31 c0       	rjmp	.+98     	; 0x1f8e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f2c:	19 82       	std	Y+1, r1	; 0x01
    1f2e:	2f c0       	rjmp	.+94     	; 0x1f8e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f30:	e3 e3       	ldi	r30, 0x33	; 51
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a9 01       	movw	r20, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <GPIO_readPin+0xde>
    1f44:	55 95       	asr	r21
    1f46:	47 95       	ror	r20
    1f48:	8a 95       	dec	r24
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <GPIO_readPin+0xda>
    1f4c:	ca 01       	movw	r24, r20
    1f4e:	81 70       	andi	r24, 0x01	; 1
    1f50:	90 70       	andi	r25, 0x00	; 0
    1f52:	88 23       	and	r24, r24
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	19 c0       	rjmp	.+50     	; 0x1f8e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f5c:	19 82       	std	Y+1, r1	; 0x01
    1f5e:	17 c0       	rjmp	.+46     	; 0x1f8e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f60:	e0 e3       	ldi	r30, 0x30	; 48
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a9 01       	movw	r20, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <GPIO_readPin+0x10e>
    1f74:	55 95       	asr	r21
    1f76:	47 95       	ror	r20
    1f78:	8a 95       	dec	r24
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <GPIO_readPin+0x10a>
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	81 70       	andi	r24, 0x01	; 1
    1f80:	90 70       	andi	r25, 0x00	; 0
    1f82:	88 23       	and	r24, r24
    1f84:	19 f0       	breq	.+6      	; 0x1f8c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <GPIO_setupPortDirection+0x6>
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <GPIO_setupPortDirection+0x8>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	90 f5       	brcc	.+100    	; 0x201a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	3c 83       	std	Y+4, r19	; 0x04
    1fbe:	2b 83       	std	Y+3, r18	; 0x03
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	d1 f0       	breq	.+52     	; 0x1ffe <GPIO_setupPortDirection+0x5e>
    1fca:	2b 81       	ldd	r18, Y+3	; 0x03
    1fcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fce:	22 30       	cpi	r18, 0x02	; 2
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <GPIO_setupPortDirection+0x3e>
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	61 f0       	breq	.+24     	; 0x1ff4 <GPIO_setupPortDirection+0x54>
    1fdc:	1e c0       	rjmp	.+60     	; 0x201a <GPIO_setupPortDirection+0x7a>
    1fde:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	81 f0       	breq	.+32     	; 0x2008 <GPIO_setupPortDirection+0x68>
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	83 30       	cpi	r24, 0x03	; 3
    1fee:	91 05       	cpc	r25, r1
    1ff0:	81 f0       	breq	.+32     	; 0x2012 <GPIO_setupPortDirection+0x72>
    1ff2:	13 c0       	rjmp	.+38     	; 0x201a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ff4:	ea e3       	ldi	r30, 0x3A	; 58
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	80 83       	st	Z, r24
    1ffc:	0e c0       	rjmp	.+28     	; 0x201a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ffe:	e7 e3       	ldi	r30, 0x37	; 55
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	80 83       	st	Z, r24
    2006:	09 c0       	rjmp	.+18     	; 0x201a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2008:	e4 e3       	ldi	r30, 0x34	; 52
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	80 83       	st	Z, r24
    2010:	04 c0       	rjmp	.+8      	; 0x201a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2012:	e1 e3       	ldi	r30, 0x31	; 49
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	80 83       	st	Z, r24
			break;
		}
	}
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <GPIO_writePort+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <GPIO_writePort+0x8>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	84 30       	cpi	r24, 0x04	; 4
    203c:	90 f5       	brcc	.+100    	; 0x20a2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	3c 83       	std	Y+4, r19	; 0x04
    2046:	2b 83       	std	Y+3, r18	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	91 05       	cpc	r25, r1
    2050:	d1 f0       	breq	.+52     	; 0x2086 <GPIO_writePort+0x5e>
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	2c f4       	brge	.+10     	; 0x2066 <GPIO_writePort+0x3e>
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	61 f0       	breq	.+24     	; 0x207c <GPIO_writePort+0x54>
    2064:	1e c0       	rjmp	.+60     	; 0x20a2 <GPIO_writePort+0x7a>
    2066:	2b 81       	ldd	r18, Y+3	; 0x03
    2068:	3c 81       	ldd	r19, Y+4	; 0x04
    206a:	22 30       	cpi	r18, 0x02	; 2
    206c:	31 05       	cpc	r19, r1
    206e:	81 f0       	breq	.+32     	; 0x2090 <GPIO_writePort+0x68>
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	91 05       	cpc	r25, r1
    2078:	81 f0       	breq	.+32     	; 0x209a <GPIO_writePort+0x72>
    207a:	13 c0       	rjmp	.+38     	; 0x20a2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    207c:	eb e3       	ldi	r30, 0x3B	; 59
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	80 83       	st	Z, r24
    2084:	0e c0       	rjmp	.+28     	; 0x20a2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2086:	e8 e3       	ldi	r30, 0x38	; 56
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	80 83       	st	Z, r24
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2090:	e5 e3       	ldi	r30, 0x35	; 53
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	80 83       	st	Z, r24
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    209a:	e2 e3       	ldi	r30, 0x32	; 50
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <GPIO_readPort+0x6>
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <GPIO_readPort+0x8>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    20be:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	84 30       	cpi	r24, 0x04	; 4
    20c4:	90 f5       	brcc	.+100    	; 0x212a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	3c 83       	std	Y+4, r19	; 0x04
    20ce:	2b 83       	std	Y+3, r18	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	91 05       	cpc	r25, r1
    20d8:	d1 f0       	breq	.+52     	; 0x210e <GPIO_readPort+0x5e>
    20da:	2b 81       	ldd	r18, Y+3	; 0x03
    20dc:	3c 81       	ldd	r19, Y+4	; 0x04
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	31 05       	cpc	r19, r1
    20e2:	2c f4       	brge	.+10     	; 0x20ee <GPIO_readPort+0x3e>
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	61 f0       	breq	.+24     	; 0x2104 <GPIO_readPort+0x54>
    20ec:	1e c0       	rjmp	.+60     	; 0x212a <GPIO_readPort+0x7a>
    20ee:	2b 81       	ldd	r18, Y+3	; 0x03
    20f0:	3c 81       	ldd	r19, Y+4	; 0x04
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	81 f0       	breq	.+32     	; 0x2118 <GPIO_readPort+0x68>
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	83 30       	cpi	r24, 0x03	; 3
    20fe:	91 05       	cpc	r25, r1
    2100:	81 f0       	breq	.+32     	; 0x2122 <GPIO_readPort+0x72>
    2102:	13 c0       	rjmp	.+38     	; 0x212a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2104:	e9 e3       	ldi	r30, 0x39	; 57
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	0e c0       	rjmp	.+28     	; 0x212a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    210e:	e6 e3       	ldi	r30, 0x36	; 54
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	09 c0       	rjmp	.+18     	; 0x212a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2118:	e3 e3       	ldi	r30, 0x33	; 51
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	04 c0       	rjmp	.+8      	; 0x212a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2122:	e0 e3       	ldi	r30, 0x30	; 48
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <TWI_init+0xa>
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01

    TWBR = (uint8)(((F_CPU/((Config_Ptr->bit_rate)*1000))-16) /2);
    214c:	00 e2       	ldi	r16, 0x20	; 32
    214e:	10 e0       	ldi	r17, 0x00	; 0
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	21 81       	ldd	r18, Z+1	; 0x01
    2156:	32 81       	ldd	r19, Z+2	; 0x02
    2158:	88 ee       	ldi	r24, 0xE8	; 232
    215a:	93 e0       	ldi	r25, 0x03	; 3
    215c:	ac 01       	movw	r20, r24
    215e:	24 9f       	mul	r18, r20
    2160:	c0 01       	movw	r24, r0
    2162:	25 9f       	mul	r18, r21
    2164:	90 0d       	add	r25, r0
    2166:	34 9f       	mul	r19, r20
    2168:	90 0d       	add	r25, r0
    216a:	11 24       	eor	r1, r1
    216c:	9c 01       	movw	r18, r24
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	92 e1       	ldi	r25, 0x12	; 18
    2176:	aa e7       	ldi	r26, 0x7A	; 122
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 56 12 	call	0x24ac	; 0x24ac <__udivmodsi4>
    2182:	da 01       	movw	r26, r20
    2184:	c9 01       	movw	r24, r18
    2186:	40 97       	sbiw	r24, 0x10	; 16
    2188:	a1 09       	sbc	r26, r1
    218a:	b1 09       	sbc	r27, r1
    218c:	b6 95       	lsr	r27
    218e:	a7 95       	ror	r26
    2190:	97 95       	ror	r25
    2192:	87 95       	ror	r24
    2194:	f8 01       	movw	r30, r16
    2196:	80 83       	st	Z, r24
	TWSR = 0x00;
    2198:	e1 e2       	ldi	r30, 0x21	; 33
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address ;
    219e:	a2 e2       	ldi	r26, 0x22	; 34
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e9 81       	ldd	r30, Y+1	; 0x01
    21a4:	fa 81       	ldd	r31, Y+2	; 0x02
    21a6:	80 81       	ld	r24, Z
    21a8:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    21aa:	e6 e5       	ldi	r30, 0x56	; 86
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	80 83       	st	Z, r24
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	08 95       	ret

000021c0 <TWI_start>:

void TWI_start(void)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    21c8:	e6 e5       	ldi	r30, 0x56	; 86
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	84 ea       	ldi	r24, 0xA4	; 164
    21ce:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21d0:	e6 e5       	ldi	r30, 0x56	; 86
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 23       	and	r24, r24
    21d8:	dc f7       	brge	.-10     	; 0x21d0 <TWI_start+0x10>
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <TWI_stop>:

void TWI_stop(void)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    21e8:	e6 e5       	ldi	r30, 0x56	; 86
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	84 e9       	ldi	r24, 0x94	; 148
    21ee:	80 83       	st	Z, r24
}
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2202:	e3 e2       	ldi	r30, 0x23	; 35
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    220a:	e6 e5       	ldi	r30, 0x56	; 86
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	84 e8       	ldi	r24, 0x84	; 132
    2210:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2212:	e6 e5       	ldi	r30, 0x56	; 86
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	88 23       	and	r24, r24
    221a:	dc f7       	brge	.-10     	; 0x2212 <TWI_writeByte+0x1c>
}
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    222c:	e6 e5       	ldi	r30, 0x56	; 86
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	84 ec       	ldi	r24, 0xC4	; 196
    2232:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2234:	e6 e5       	ldi	r30, 0x56	; 86
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	88 23       	and	r24, r24
    223c:	dc f7       	brge	.-10     	; 0x2234 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    223e:	e3 e2       	ldi	r30, 0x23	; 35
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
}
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2252:	e6 e5       	ldi	r30, 0x56	; 86
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	84 e8       	ldi	r24, 0x84	; 132
    2258:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    225a:	e6 e5       	ldi	r30, 0x56	; 86
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	88 23       	and	r24, r24
    2262:	dc f7       	brge	.-10     	; 0x225a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2264:	e3 e2       	ldi	r30, 0x23	; 35
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
}
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	0f 92       	push	r0
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    227a:	e1 e2       	ldi	r30, 0x21	; 33
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	88 7f       	andi	r24, 0xF8	; 248
    2282:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2284:	89 81       	ldd	r24, Y+1	; 0x01
}
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <UART_init+0x6>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <UART_init+0x8>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    229e:	1a 82       	std	Y+2, r1	; 0x02
    22a0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    22a2:	eb e2       	ldi	r30, 0x2B	; 43
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    22aa:	ea e2       	ldi	r30, 0x2A	; 42
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	88 e1       	ldi	r24, 0x18	; 24
    22b0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data) << 1) | ((Config_Ptr->stop_bit) << 3) | ((Config_Ptr->parity) << 4) ;
    22b2:	a0 e4       	ldi	r26, 0x40	; 64
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	eb 81       	ldd	r30, Y+3	; 0x03
    22b8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ba:	80 81       	ld	r24, Z
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	28 2f       	mov	r18, r24
    22c6:	20 68       	ori	r18, 0x80	; 128
    22c8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ca:	fc 81       	ldd	r31, Y+4	; 0x04
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	28 2b       	or	r18, r24
    22e0:	eb 81       	ldd	r30, Y+3	; 0x03
    22e2:	fc 81       	ldd	r31, Y+4	; 0x04
    22e4:	81 81       	ldd	r24, Z+1	; 0x01
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	82 95       	swap	r24
    22ec:	92 95       	swap	r25
    22ee:	90 7f       	andi	r25, 0xF0	; 240
    22f0:	98 27       	eor	r25, r24
    22f2:	80 7f       	andi	r24, 0xF0	; 240
    22f4:	98 27       	eor	r25, r24
    22f6:	82 2b       	or	r24, r18
    22f8:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    22fa:	eb 81       	ldd	r30, Y+3	; 0x03
    22fc:	fc 81       	ldd	r31, Y+4	; 0x04
    22fe:	83 81       	ldd	r24, Z+3	; 0x03
    2300:	94 81       	ldd	r25, Z+4	; 0x04
    2302:	a5 81       	ldd	r26, Z+5	; 0x05
    2304:	b6 81       	ldd	r27, Z+6	; 0x06
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	aa 1f       	adc	r26, r26
    230c:	bb 1f       	adc	r27, r27
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	aa 1f       	adc	r26, r26
    2314:	bb 1f       	adc	r27, r27
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	aa 1f       	adc	r26, r26
    231c:	bb 1f       	adc	r27, r27
    231e:	9c 01       	movw	r18, r24
    2320:	ad 01       	movw	r20, r26
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	92 e1       	ldi	r25, 0x12	; 18
    2326:	aa e7       	ldi	r26, 0x7A	; 122
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 56 12 	call	0x24ac	; 0x24ac <__udivmodsi4>
    2332:	da 01       	movw	r26, r20
    2334:	c9 01       	movw	r24, r18
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    233c:	e0 e4       	ldi	r30, 0x40	; 64
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	9a 81       	ldd	r25, Y+2	; 0x02
    2344:	89 2f       	mov	r24, r25
    2346:	99 27       	eor	r25, r25
    2348:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    234a:	e9 e2       	ldi	r30, 0x29	; 41
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	80 83       	st	Z, r24
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    236c:	eb e2       	ldi	r30, 0x2B	; 43
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	80 72       	andi	r24, 0x20	; 32
    2378:	90 70       	andi	r25, 0x00	; 0
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	b9 f3       	breq	.-18     	; 0x236c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    237e:	ec e2       	ldi	r30, 0x2C	; 44
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	80 83       	st	Z, r24


}
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2396:	eb e2       	ldi	r30, 0x2B	; 43
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	88 23       	and	r24, r24
    239e:	dc f7       	brge	.-10     	; 0x2396 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    23a0:	ec e2       	ldi	r30, 0x2C	; 44
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
}
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <UART_sendString+0x6>
    23b2:	0f 92       	push	r0
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9b 83       	std	Y+3, r25	; 0x03
    23ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23bc:	19 82       	std	Y+1, r1	; 0x01
    23be:	0e c0       	rjmp	.+28     	; 0x23dc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ca:	fc 01       	movw	r30, r24
    23cc:	e2 0f       	add	r30, r18
    23ce:	f3 1f       	adc	r31, r19
    23d0:	80 81       	ld	r24, Z
    23d2:	0e 94 b0 11 	call	0x2360	; 0x2360 <UART_sendByte>
		i++;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	9b 81       	ldd	r25, Y+3	; 0x03
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	80 81       	ld	r24, Z
    23ee:	88 23       	and	r24, r24
    23f0:	39 f7       	brne	.-50     	; 0x23c0 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	00 d0       	rcall	.+0      	; 0x2408 <UART_receiveString+0xa>
    2408:	0f 92       	push	r0
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	9b 83       	std	Y+3, r25	; 0x03
    2410:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2412:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	9b 81       	ldd	r25, Y+3	; 0x03
    241e:	8c 01       	movw	r16, r24
    2420:	02 0f       	add	r16, r18
    2422:	13 1f       	adc	r17, r19
    2424:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_recieveByte>
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	0f c0       	rjmp	.+30     	; 0x244c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
	{
		i++;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	8f 5f       	subi	r24, 0xFF	; 255
    2432:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	8c 01       	movw	r16, r24
    2440:	02 0f       	add	r16, r18
    2442:	13 1f       	adc	r17, r19
    2444:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_recieveByte>
    2448:	f8 01       	movw	r30, r16
    244a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	9b 81       	ldd	r25, Y+3	; 0x03
    2456:	fc 01       	movw	r30, r24
    2458:	e2 0f       	add	r30, r18
    245a:	f3 1f       	adc	r31, r19
    245c:	80 81       	ld	r24, Z
    245e:	8d 30       	cpi	r24, 0x0D	; 13
    2460:	31 f7       	brne	.-52     	; 0x242e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	fc 01       	movw	r30, r24
    246e:	e2 0f       	add	r30, r18
    2470:	f3 1f       	adc	r31, r19
    2472:	10 82       	st	Z, r1
}
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	08 95       	ret

00002484 <__udivmodhi4>:
    2484:	aa 1b       	sub	r26, r26
    2486:	bb 1b       	sub	r27, r27
    2488:	51 e1       	ldi	r21, 0x11	; 17
    248a:	07 c0       	rjmp	.+14     	; 0x249a <__udivmodhi4_ep>

0000248c <__udivmodhi4_loop>:
    248c:	aa 1f       	adc	r26, r26
    248e:	bb 1f       	adc	r27, r27
    2490:	a6 17       	cp	r26, r22
    2492:	b7 07       	cpc	r27, r23
    2494:	10 f0       	brcs	.+4      	; 0x249a <__udivmodhi4_ep>
    2496:	a6 1b       	sub	r26, r22
    2498:	b7 0b       	sbc	r27, r23

0000249a <__udivmodhi4_ep>:
    249a:	88 1f       	adc	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	5a 95       	dec	r21
    24a0:	a9 f7       	brne	.-22     	; 0x248c <__udivmodhi4_loop>
    24a2:	80 95       	com	r24
    24a4:	90 95       	com	r25
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	08 95       	ret

000024ac <__udivmodsi4>:
    24ac:	a1 e2       	ldi	r26, 0x21	; 33
    24ae:	1a 2e       	mov	r1, r26
    24b0:	aa 1b       	sub	r26, r26
    24b2:	bb 1b       	sub	r27, r27
    24b4:	fd 01       	movw	r30, r26
    24b6:	0d c0       	rjmp	.+26     	; 0x24d2 <__udivmodsi4_ep>

000024b8 <__udivmodsi4_loop>:
    24b8:	aa 1f       	adc	r26, r26
    24ba:	bb 1f       	adc	r27, r27
    24bc:	ee 1f       	adc	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	a2 17       	cp	r26, r18
    24c2:	b3 07       	cpc	r27, r19
    24c4:	e4 07       	cpc	r30, r20
    24c6:	f5 07       	cpc	r31, r21
    24c8:	20 f0       	brcs	.+8      	; 0x24d2 <__udivmodsi4_ep>
    24ca:	a2 1b       	sub	r26, r18
    24cc:	b3 0b       	sbc	r27, r19
    24ce:	e4 0b       	sbc	r30, r20
    24d0:	f5 0b       	sbc	r31, r21

000024d2 <__udivmodsi4_ep>:
    24d2:	66 1f       	adc	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	88 1f       	adc	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	1a 94       	dec	r1
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <__udivmodsi4_loop>
    24de:	60 95       	com	r22
    24e0:	70 95       	com	r23
    24e2:	80 95       	com	r24
    24e4:	90 95       	com	r25
    24e6:	9b 01       	movw	r18, r22
    24e8:	ac 01       	movw	r20, r24
    24ea:	bd 01       	movw	r22, r26
    24ec:	cf 01       	movw	r24, r30
    24ee:	08 95       	ret

000024f0 <__prologue_saves__>:
    24f0:	2f 92       	push	r2
    24f2:	3f 92       	push	r3
    24f4:	4f 92       	push	r4
    24f6:	5f 92       	push	r5
    24f8:	6f 92       	push	r6
    24fa:	7f 92       	push	r7
    24fc:	8f 92       	push	r8
    24fe:	9f 92       	push	r9
    2500:	af 92       	push	r10
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	ca 1b       	sub	r28, r26
    251a:	db 0b       	sbc	r29, r27
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	09 94       	ijmp

00002528 <__epilogue_restores__>:
    2528:	2a 88       	ldd	r2, Y+18	; 0x12
    252a:	39 88       	ldd	r3, Y+17	; 0x11
    252c:	48 88       	ldd	r4, Y+16	; 0x10
    252e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2530:	6e 84       	ldd	r6, Y+14	; 0x0e
    2532:	7d 84       	ldd	r7, Y+13	; 0x0d
    2534:	8c 84       	ldd	r8, Y+12	; 0x0c
    2536:	9b 84       	ldd	r9, Y+11	; 0x0b
    2538:	aa 84       	ldd	r10, Y+10	; 0x0a
    253a:	b9 84       	ldd	r11, Y+9	; 0x09
    253c:	c8 84       	ldd	r12, Y+8	; 0x08
    253e:	df 80       	ldd	r13, Y+7	; 0x07
    2540:	ee 80       	ldd	r14, Y+6	; 0x06
    2542:	fd 80       	ldd	r15, Y+5	; 0x05
    2544:	0c 81       	ldd	r16, Y+4	; 0x04
    2546:	1b 81       	ldd	r17, Y+3	; 0x03
    2548:	aa 81       	ldd	r26, Y+2	; 0x02
    254a:	b9 81       	ldd	r27, Y+1	; 0x01
    254c:	ce 0f       	add	r28, r30
    254e:	d1 1d       	adc	r29, r1
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	ed 01       	movw	r28, r26
    255c:	08 95       	ret

0000255e <_exit>:
    255e:	f8 94       	cli

00002560 <__stop_program>:
    2560:	ff cf       	rjmp	.-2      	; 0x2560 <__stop_program>
