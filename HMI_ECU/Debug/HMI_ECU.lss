
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000305c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  0000305c  000030f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800120  00800120  000031b0  2**0
                  ALLOC
  3 .stab         000026b8  00000000  00000000  000031b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1a  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006782  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000867b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009566  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a314  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a701  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 06 	call	0xdb4	; 0xdb4 <main>
      8a:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e1       	ldi	r26, 0x10	; 16
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <takePassward>:
#include <util/delay.h> /* For the delay functions */
#include "uart.h"

static uint8 key;
void takePassward(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
     b5a:	1f 86       	std	Y+15, r1	; 0x0f

	while(1)
	{
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */

		key = KEYPAD_getPressedKey();
     b5c:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <KEYPAD_getPressedKey>
     b60:	80 93 20 01 	sts	0x0120, r24
		UART_sendByte(key);
     b64:	80 91 20 01 	lds	r24, 0x0120
     b68:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <UART_sendByte>

		if(key == 13)
     b6c:	80 91 20 01 	lds	r24, 0x0120
     b70:	8d 30       	cpi	r24, 0x0D	; 13
     b72:	09 f4       	brne	.+2      	; 0xb76 <takePassward+0x30>
     b74:	79 c0       	rjmp	.+242    	; 0xc68 <takePassward+0x122>
		{
			return;
		}
		LCD_displayCharacter('*'); /* display the pressed keypad switch */
     b76:	8a e2       	ldi	r24, 0x2A	; 42
     b78:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayCharacter>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	aa ef       	ldi	r26, 0xFA	; 250
     b82:	b3 e4       	ldi	r27, 0x43	; 67
     b84:	8b 87       	std	Y+11, r24	; 0x0b
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	ad 87       	std	Y+13, r26	; 0x0d
     b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b90:	8d 85       	ldd	r24, Y+13	; 0x0d
     b92:	9e 85       	ldd	r25, Y+14	; 0x0e
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4a ef       	ldi	r20, 0xFA	; 250
     b9a:	54 e4       	ldi	r21, 0x44	; 68
     b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	8f 83       	std	Y+7, r24	; 0x07
     ba6:	98 87       	std	Y+8, r25	; 0x08
     ba8:	a9 87       	std	Y+9, r26	; 0x09
     baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bac:	6f 81       	ldd	r22, Y+7	; 0x07
     bae:	78 85       	ldd	r23, Y+8	; 0x08
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	2c f4       	brge	.+10     	; 0xbce <takePassward+0x88>
		__ticks = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9e 83       	std	Y+6, r25	; 0x06
     bca:	8d 83       	std	Y+5, r24	; 0x05
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <takePassward+0x106>
	else if (__tmp > 65535)
     bce:	6f 81       	ldd	r22, Y+7	; 0x07
     bd0:	78 85       	ldd	r23, Y+8	; 0x08
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	4c f5       	brge	.+82     	; 0xc38 <takePassward+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	6b 85       	ldd	r22, Y+11	; 0x0b
     be8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bea:	8d 85       	ldd	r24, Y+13	; 0x0d
     bec:	9e 85       	ldd	r25, Y+14	; 0x0e
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <takePassward+0xe8>
     c10:	88 ec       	ldi	r24, 0xC8	; 200
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <takePassward+0xd6>
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	69 f7       	brne	.-38     	; 0xc10 <takePassward+0xca>
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <takePassward+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c38:	6f 81       	ldd	r22, Y+7	; 0x07
     c3a:	78 85       	ldd	r23, Y+8	; 0x08
     c3c:	89 85       	ldd	r24, Y+9	; 0x09
     c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9e 83       	std	Y+6, r25	; 0x06
     c4a:	8d 83       	std	Y+5, r24	; 0x05
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <takePassward+0x112>
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(500); /* Press time */
		i++;  /*increase the counter*/
     c60:	8f 85       	ldd	r24, Y+15	; 0x0f
     c62:	8f 5f       	subi	r24, 0xFF	; 255
     c64:	8f 87       	std	Y+15, r24	; 0x0f
     c66:	7a cf       	rjmp	.-268    	; 0xb5c <takePassward+0x16>
	}
}
     c68:	2f 96       	adiw	r28, 0x0f	; 15
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <homeScreen>:
void homeScreen(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	2e 97       	sbiw	r28, 0x0e	; 14
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     c8e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
     c92:	20 e6       	ldi	r18, 0x60	; 96
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	a9 01       	movw	r20, r18
     c9c:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     ca0:	2e e6       	ldi	r18, 0x6E	; 110
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	a9 01       	movw	r20, r18
     caa:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
	key = KEYPAD_getPressedKey();
     cae:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <KEYPAD_getPressedKey>
     cb2:	80 93 20 01 	sts	0x0120, r24
	UART_sendByte(key);
     cb6:	80 91 20 01 	lds	r24, 0x0120
     cba:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <UART_sendByte>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	aa ef       	ldi	r26, 0xFA	; 250
     cc4:	b3 e4       	ldi	r27, 0x43	; 67
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <homeScreen+0x96>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <homeScreen+0x114>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <homeScreen+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <homeScreen+0xf6>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <homeScreen+0xe4>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <homeScreen+0xd8>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <homeScreen+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <homeScreen+0x120>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500); /* Press time */

}
     da2:	2e 96       	adiw	r28, 0x0e	; 14
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <main>:
#include "hmi_ecu.h"

uint8 receiveTemp;  /*temp value to receive bytes from control_ECU*/

int main(void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	aa 97       	sbiw	r28, 0x2a	; 42
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UARTConfig = {UART_8_BIT_DATA, UART_PARITY_DISABLED,UART_1_BIT,9600}; /*configuration of uart*/
     dc8:	9e 01       	movw	r18, r28
     dca:	23 5e       	subi	r18, 0xE3	; 227
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	3f a3       	std	Y+39, r19	; 0x27
     dd0:	2e a3       	std	Y+38, r18	; 0x26
     dd2:	88 e1       	ldi	r24, 0x18	; 24
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	99 a7       	std	Y+41, r25	; 0x29
     dd8:	88 a7       	std	Y+40, r24	; 0x28
     dda:	97 e0       	ldi	r25, 0x07	; 7
     ddc:	9a a7       	std	Y+42, r25	; 0x2a
     dde:	e8 a5       	ldd	r30, Y+40	; 0x28
     de0:	f9 a5       	ldd	r31, Y+41	; 0x29
     de2:	00 80       	ld	r0, Z
     de4:	28 a5       	ldd	r18, Y+40	; 0x28
     de6:	39 a5       	ldd	r19, Y+41	; 0x29
     de8:	2f 5f       	subi	r18, 0xFF	; 255
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	39 a7       	std	Y+41, r19	; 0x29
     dee:	28 a7       	std	Y+40, r18	; 0x28
     df0:	ee a1       	ldd	r30, Y+38	; 0x26
     df2:	ff a1       	ldd	r31, Y+39	; 0x27
     df4:	00 82       	st	Z, r0
     df6:	2e a1       	ldd	r18, Y+38	; 0x26
     df8:	3f a1       	ldd	r19, Y+39	; 0x27
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	3f a3       	std	Y+39, r19	; 0x27
     e00:	2e a3       	std	Y+38, r18	; 0x26
     e02:	3a a5       	ldd	r19, Y+42	; 0x2a
     e04:	31 50       	subi	r19, 0x01	; 1
     e06:	3a a7       	std	Y+42, r19	; 0x2a
     e08:	8a a5       	ldd	r24, Y+42	; 0x2a
     e0a:	88 23       	and	r24, r24
     e0c:	41 f7       	brne	.-48     	; 0xdde <main+0x2a>
	LCD_init();                  /*lcd initialization*/
     e0e:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_init>
	UART_init(&UARTConfig);      /*uart initialization */
     e12:	ce 01       	movw	r24, r28
     e14:	4d 96       	adiw	r24, 0x1d	; 29
     e16:	0e 94 93 16 	call	0x2d26	; 0x2d26 <UART_init>
	UART_sendByte(IAM_READY);    /*send i am ready to control_ECU to send order*/
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <UART_sendByte>
	while(1)
	{
		receiveTemp = UART_recieveByte(); /*receive order from control_ECU*/
     e20:	0e 94 13 17 	call	0x2e26	; 0x2e26 <UART_recieveByte>
     e24:	80 93 21 01 	sts	0x0121, r24
		switch(receiveTemp)
     e28:	80 91 21 01 	lds	r24, 0x0121
     e2c:	e8 2f       	mov	r30, r24
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	fd a3       	std	Y+37, r31	; 0x25
     e32:	ec a3       	std	Y+36, r30	; 0x24
     e34:	2c a1       	ldd	r18, Y+36	; 0x24
     e36:	3d a1       	ldd	r19, Y+37	; 0x25
     e38:	25 30       	cpi	r18, 0x05	; 5
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <main+0x8c>
     e3e:	eb c0       	rjmp	.+470    	; 0x1016 <main+0x262>
     e40:	8c a1       	ldd	r24, Y+36	; 0x24
     e42:	9d a1       	ldd	r25, Y+37	; 0x25
     e44:	86 30       	cpi	r24, 0x06	; 6
     e46:	91 05       	cpc	r25, r1
     e48:	f4 f4       	brge	.+60     	; 0xe86 <main+0xd2>
     e4a:	ec a1       	ldd	r30, Y+36	; 0x24
     e4c:	fd a1       	ldd	r31, Y+37	; 0x25
     e4e:	e2 30       	cpi	r30, 0x02	; 2
     e50:	f1 05       	cpc	r31, r1
     e52:	09 f4       	brne	.+2      	; 0xe56 <main+0xa2>
     e54:	41 c0       	rjmp	.+130    	; 0xed8 <main+0x124>
     e56:	2c a1       	ldd	r18, Y+36	; 0x24
     e58:	3d a1       	ldd	r19, Y+37	; 0x25
     e5a:	23 30       	cpi	r18, 0x03	; 3
     e5c:	31 05       	cpc	r19, r1
     e5e:	34 f4       	brge	.+12     	; 0xe6c <main+0xb8>
     e60:	8c a1       	ldd	r24, Y+36	; 0x24
     e62:	9d a1       	ldd	r25, Y+37	; 0x25
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	39 f1       	breq	.+78     	; 0xeb8 <main+0x104>
     e6a:	da cf       	rjmp	.-76     	; 0xe20 <main+0x6c>
     e6c:	ec a1       	ldd	r30, Y+36	; 0x24
     e6e:	fd a1       	ldd	r31, Y+37	; 0x25
     e70:	e3 30       	cpi	r30, 0x03	; 3
     e72:	f1 05       	cpc	r31, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <main+0xc4>
     e76:	43 c0       	rjmp	.+134    	; 0xefe <main+0x14a>
     e78:	2c a1       	ldd	r18, Y+36	; 0x24
     e7a:	3d a1       	ldd	r19, Y+37	; 0x25
     e7c:	24 30       	cpi	r18, 0x04	; 4
     e7e:	31 05       	cpc	r19, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <main+0xd0>
     e82:	4d c0       	rjmp	.+154    	; 0xf1e <main+0x16a>
     e84:	cd cf       	rjmp	.-102    	; 0xe20 <main+0x6c>
     e86:	8c a1       	ldd	r24, Y+36	; 0x24
     e88:	9d a1       	ldd	r25, Y+37	; 0x25
     e8a:	87 30       	cpi	r24, 0x07	; 7
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <main+0xde>
     e90:	41 c1       	rjmp	.+642    	; 0x1114 <main+0x360>
     e92:	ec a1       	ldd	r30, Y+36	; 0x24
     e94:	fd a1       	ldd	r31, Y+37	; 0x25
     e96:	e7 30       	cpi	r30, 0x07	; 7
     e98:	f1 05       	cpc	r31, r1
     e9a:	0c f4       	brge	.+2      	; 0xe9e <main+0xea>
     e9c:	bf c0       	rjmp	.+382    	; 0x101c <main+0x268>
     e9e:	2c a1       	ldd	r18, Y+36	; 0x24
     ea0:	3d a1       	ldd	r19, Y+37	; 0x25
     ea2:	28 30       	cpi	r18, 0x08	; 8
     ea4:	31 05       	cpc	r19, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <main+0xf6>
     ea8:	44 c1       	rjmp	.+648    	; 0x1132 <main+0x37e>
     eaa:	8c a1       	ldd	r24, Y+36	; 0x24
     eac:	9d a1       	ldd	r25, Y+37	; 0x25
     eae:	89 30       	cpi	r24, 0x09	; 9
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <main+0x102>
     eb4:	4d c1       	rjmp	.+666    	; 0x1150 <main+0x39c>
     eb6:	b4 cf       	rjmp	.-152    	; 0xe20 <main+0x6c>
		{
		case NEW_PASS:
			LCD_clearScreen(); /* clear the screen */
     eb8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"plz enter pass:");
     ebc:	2e e7       	ldi	r18, 0x7E	; 126
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	a9 01       	movw	r20, r18
     ec6:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0); /* Move the cursor to the second row */
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	0e 94 d5 11 	call	0x23aa	; 0x23aa <LCD_moveCursor>
			takePassward();     /*take passward from user*/
     ed2:	0e 94 a3 05 	call	0xb46	; 0xb46 <takePassward>
     ed6:	a4 cf       	rjmp	.-184    	; 0xe20 <main+0x6c>
			break;

		case RE_PASS:
			LCD_clearScreen();
     ed8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"plz re-enter the:");
     edc:	2e e8       	ldi	r18, 0x8E	; 142
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"same pass: ");
     eea:	20 ea       	ldi	r18, 0xA0	; 160
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	a9 01       	movw	r20, r18
     ef4:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
			takePassward();
     ef8:	0e 94 a3 05 	call	0xb46	; 0xb46 <takePassward>
     efc:	91 cf       	rjmp	.-222    	; 0xe20 <main+0x6c>
			break;

		case currtent_pass:
			LCD_clearScreen();
     efe:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"plz enter pass:");
     f02:	2e e7       	ldi	r18, 0x7E	; 126
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	a9 01       	movw	r20, r18
     f0c:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0); /* Move the cursor to the second row */
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	0e 94 d5 11 	call	0x23aa	; 0x23aa <LCD_moveCursor>
			takePassward();
     f18:	0e 94 a3 05 	call	0xb46	; 0xb46 <takePassward>
     f1c:	81 cf       	rjmp	.-254    	; 0xe20 <main+0x6c>
			break;

		case NOT_MATCH:
			LCD_clearScreen();
     f1e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"the pass unmatched");
     f22:	2c ea       	ldi	r18, 0xAC	; 172
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	a9 01       	movw	r20, r18
     f2c:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	aa ef       	ldi	r26, 0xFA	; 250
     f36:	b3 e4       	ldi	r27, 0x43	; 67
     f38:	89 8f       	std	Y+25, r24	; 0x19
     f3a:	9a 8f       	std	Y+26, r25	; 0x1a
     f3c:	ab 8f       	std	Y+27, r26	; 0x1b
     f3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f40:	69 8d       	ldd	r22, Y+25	; 0x19
     f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	4a ef       	ldi	r20, 0xFA	; 250
     f4e:	54 e4       	ldi	r21, 0x44	; 68
     f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	8d 8b       	std	Y+21, r24	; 0x15
     f5a:	9e 8b       	std	Y+22, r25	; 0x16
     f5c:	af 8b       	std	Y+23, r26	; 0x17
     f5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f60:	6d 89       	ldd	r22, Y+21	; 0x15
     f62:	7e 89       	ldd	r23, Y+22	; 0x16
     f64:	8f 89       	ldd	r24, Y+23	; 0x17
     f66:	98 8d       	ldd	r25, Y+24	; 0x18
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	5f e3       	ldi	r21, 0x3F	; 63
     f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f74:	88 23       	and	r24, r24
     f76:	2c f4       	brge	.+10     	; 0xf82 <main+0x1ce>
		__ticks = 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9c 8b       	std	Y+20, r25	; 0x14
     f7e:	8b 8b       	std	Y+19, r24	; 0x13
     f80:	3f c0       	rjmp	.+126    	; 0x1000 <main+0x24c>
	else if (__tmp > 65535)
     f82:	6d 89       	ldd	r22, Y+21	; 0x15
     f84:	7e 89       	ldd	r23, Y+22	; 0x16
     f86:	8f 89       	ldd	r24, Y+23	; 0x17
     f88:	98 8d       	ldd	r25, Y+24	; 0x18
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	3f ef       	ldi	r19, 0xFF	; 255
     f8e:	4f e7       	ldi	r20, 0x7F	; 127
     f90:	57 e4       	ldi	r21, 0x47	; 71
     f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f96:	18 16       	cp	r1, r24
     f98:	4c f5       	brge	.+82     	; 0xfec <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9a:	69 8d       	ldd	r22, Y+25	; 0x19
     f9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e2       	ldi	r20, 0x20	; 32
     fa8:	51 e4       	ldi	r21, 0x41	; 65
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9c 8b       	std	Y+20, r25	; 0x14
     fc0:	8b 8b       	std	Y+19, r24	; 0x13
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <main+0x22e>
     fc4:	88 ec       	ldi	r24, 0xC8	; 200
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9a 8b       	std	Y+18, r25	; 0x12
     fca:	89 8b       	std	Y+17, r24	; 0x11
     fcc:	89 89       	ldd	r24, Y+17	; 0x11
     fce:	9a 89       	ldd	r25, Y+18	; 0x12
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <main+0x21c>
     fd4:	9a 8b       	std	Y+18, r25	; 0x12
     fd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd8:	8b 89       	ldd	r24, Y+19	; 0x13
     fda:	9c 89       	ldd	r25, Y+20	; 0x14
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	9c 8b       	std	Y+20, r25	; 0x14
     fe0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe2:	8b 89       	ldd	r24, Y+19	; 0x13
     fe4:	9c 89       	ldd	r25, Y+20	; 0x14
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	69 f7       	brne	.-38     	; 0xfc4 <main+0x210>
     fea:	1a cf       	rjmp	.-460    	; 0xe20 <main+0x6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	6d 89       	ldd	r22, Y+21	; 0x15
     fee:	7e 89       	ldd	r23, Y+22	; 0x16
     ff0:	8f 89       	ldd	r24, Y+23	; 0x17
     ff2:	98 8d       	ldd	r25, Y+24	; 0x18
     ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9c 8b       	std	Y+20, r25	; 0x14
     ffe:	8b 8b       	std	Y+19, r24	; 0x13
    1000:	8b 89       	ldd	r24, Y+19	; 0x13
    1002:	9c 89       	ldd	r25, Y+20	; 0x14
    1004:	98 8b       	std	Y+16, r25	; 0x10
    1006:	8f 87       	std	Y+15, r24	; 0x0f
    1008:	8f 85       	ldd	r24, Y+15	; 0x0f
    100a:	98 89       	ldd	r25, Y+16	; 0x10
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <main+0x258>
    1010:	98 8b       	std	Y+16, r25	; 0x10
    1012:	8f 87       	std	Y+15, r24	; 0x0f
    1014:	05 cf       	rjmp	.-502    	; 0xe20 <main+0x6c>
			_delay_ms(500);
			break;

		case HOME_SCREEN:
			homeScreen();
    1016:	0e 94 3d 06 	call	0xc7a	; 0xc7a <homeScreen>
    101a:	02 cf       	rjmp	.-508    	; 0xe20 <main+0x6c>
			break;

		case PASS_CREATED:
			LCD_clearScreen();
    101c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"PASS CREATED:");
    1020:	2f eb       	ldi	r18, 0xBF	; 191
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	a9 01       	movw	r20, r18
    102a:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	aa ef       	ldi	r26, 0xFA	; 250
    1034:	b3 e4       	ldi	r27, 0x43	; 67
    1036:	8b 87       	std	Y+11, r24	; 0x0b
    1038:	9c 87       	std	Y+12, r25	; 0x0c
    103a:	ad 87       	std	Y+13, r26	; 0x0d
    103c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a ef       	ldi	r20, 0xFA	; 250
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8f 83       	std	Y+7, r24	; 0x07
    1058:	98 87       	std	Y+8, r25	; 0x08
    105a:	a9 87       	std	Y+9, r26	; 0x09
    105c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105e:	6f 81       	ldd	r22, Y+7	; 0x07
    1060:	78 85       	ldd	r23, Y+8	; 0x08
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	9a 85       	ldd	r25, Y+10	; 0x0a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <main+0x2cc>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <main+0x34a>
	else if (__tmp > 65535)
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <main+0x32c>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <main+0x31a>
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <main+0x30e>
    10e8:	9b ce       	rjmp	.-714    	; 0xe20 <main+0x6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <main+0x356>
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	86 ce       	rjmp	.-756    	; 0xe20 <main+0x6c>
			_delay_ms(500);
			break;

		case DOOR_OPEN:
			LCD_displayStringRowColumn(0,0,"THE DOOR OPENED:");
    1114:	2d ec       	ldi	r18, 0xCD	; 205
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"            ");
    1122:	2e ed       	ldi	r18, 0xDE	; 222
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
    1130:	77 ce       	rjmp	.-786    	; 0xe20 <main+0x6c>
			break;

		case DOOR_closed:
			LCD_displayStringRowColumn(0,0,"THE DOOR CLOSED:");
    1132:	2b ee       	ldi	r18, 0xEB	; 235
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"            ");
    1140:	2e ed       	ldi	r18, 0xDE	; 222
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	a9 01       	movw	r20, r18
    114a:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
    114e:	68 ce       	rjmp	.-816    	; 0xe20 <main+0x6c>
			break;

		case BUZZER_ON:
			LCD_displayStringRowColumn(0,0,"      ERROR        ");
    1150:	2c ef       	ldi	r18, 0xFC	; 252
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"            ");
    115e:	2e ed       	ldi	r18, 0xDE	; 222
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	0e 94 17 12 	call	0x242e	; 0x242e <LCD_displayStringRowColumn>
    116c:	59 ce       	rjmp	.-846    	; 0xe20 <main+0x6c>

0000116e <LCD_init>:
 *[ARG]            :  No ARG
 *
 * [Return]        : Void
 */
void LCD_init(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2e 97       	sbiw	r28, 0x0e	; 14
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	66 e0       	ldi	r22, 0x06	; 6
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 5d 12 	call	0x24ba	; 0x24ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	65 e0       	ldi	r22, 0x05	; 5
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	0e 94 5d 12 	call	0x24ba	; 0x24ba <GPIO_setupPinDirection>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a0 ea       	ldi	r26, 0xA0	; 160
    119c:	b1 e4       	ldi	r27, 0x41	; 65
    119e:	8b 87       	std	Y+11, r24	; 0x0b
    11a0:	9c 87       	std	Y+12, r25	; 0x0c
    11a2:	ad 87       	std	Y+13, r26	; 0x0d
    11a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a ef       	ldi	r20, 0xFA	; 250
    11b4:	54 e4       	ldi	r21, 0x44	; 68
    11b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	8f 83       	std	Y+7, r24	; 0x07
    11c0:	98 87       	std	Y+8, r25	; 0x08
    11c2:	a9 87       	std	Y+9, r26	; 0x09
    11c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c6:	6f 81       	ldd	r22, Y+7	; 0x07
    11c8:	78 85       	ldd	r23, Y+8	; 0x08
    11ca:	89 85       	ldd	r24, Y+9	; 0x09
    11cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11da:	88 23       	and	r24, r24
    11dc:	2c f4       	brge	.+10     	; 0x11e8 <LCD_init+0x7a>
		__ticks = 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9e 83       	std	Y+6, r25	; 0x06
    11e4:	8d 83       	std	Y+5, r24	; 0x05
    11e6:	3f c0       	rjmp	.+126    	; 0x1266 <LCD_init+0xf8>
	else if (__tmp > 65535)
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	4f e7       	ldi	r20, 0x7F	; 127
    11f6:	57 e4       	ldi	r21, 0x47	; 71
    11f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fc:	18 16       	cp	r1, r24
    11fe:	4c f5       	brge	.+82     	; 0x1252 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1200:	6b 85       	ldd	r22, Y+11	; 0x0b
    1202:	7c 85       	ldd	r23, Y+12	; 0x0c
    1204:	8d 85       	ldd	r24, Y+13	; 0x0d
    1206:	9e 85       	ldd	r25, Y+14	; 0x0e
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e2       	ldi	r20, 0x20	; 32
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	0f c0       	rjmp	.+30     	; 0x1248 <LCD_init+0xda>
    122a:	88 ec       	ldi	r24, 0xC8	; 200
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9c 83       	std	Y+4, r25	; 0x04
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <LCD_init+0xc8>
    123a:	9c 83       	std	Y+4, r25	; 0x04
    123c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	69 f7       	brne	.-38     	; 0x122a <LCD_init+0xbc>
    1250:	14 c0       	rjmp	.+40     	; 0x127a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1252:	6f 81       	ldd	r22, Y+7	; 0x07
    1254:	78 85       	ldd	r23, Y+8	; 0x08
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	9a 85       	ldd	r25, Y+10	; 0x0a
    125a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <LCD_init+0x104>
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */


#if(LCD_DATA_BITS_MODE == 4)
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	63 e0       	ldi	r22, 0x03	; 3
    127e:	41 e0       	ldi	r20, 0x01	; 1
    1280:	0e 94 5d 12 	call	0x24ba	; 0x24ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	62 e0       	ldi	r22, 0x02	; 2
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 5d 12 	call	0x24ba	; 0x24ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    12a2:	83 e3       	ldi	r24, 0x33	; 51
    12a4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    12a8:	82 e3       	ldi	r24, 0x32	; 50
    12aa:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    12ae:	88 e2       	ldi	r24, 0x28	; 40
    12b0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif
	LCD_sendCommand(LCD_Display_On_Cursor_Off);      /* cursor off */
    12b4:	8c e0       	ldi	r24, 0x0C	; 12
    12b6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_sendCommand>
	LCD_sendCommand(LCD_Clear_Display_Screen);      /* clear LCD at the beginning */
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_sendCommand>

}
    12c0:	2e 96       	adiw	r28, 0x0e	; 14
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <LCD_sendCommand>:
 *                       This Arg Indicate To The command.
 *
 * [Return]        : Void
 */
void LCD_sendCommand(uint8 command)
{
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	c5 55       	subi	r28, 0x55	; 85
    12e0:	d0 40       	sbci	r29, 0x00	; 0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	fe 01       	movw	r30, r28
    12ee:	eb 5a       	subi	r30, 0xAB	; 171
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);         /* Data Mode RS=0 */
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	66 e0       	ldi	r22, 0x06	; 6
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    12fe:	fe 01       	movw	r30, r28
    1300:	ef 5a       	subi	r30, 0xAF	; 175
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a0 e8       	ldi	r26, 0x80	; 128
    130a:	bf e3       	ldi	r27, 0x3F	; 63
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	a2 83       	std	Z+2, r26	; 0x02
    1312:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1314:	8e 01       	movw	r16, r28
    1316:	03 5b       	subi	r16, 0xB3	; 179
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	fe 01       	movw	r30, r28
    131c:	ef 5a       	subi	r30, 0xAF	; 175
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	60 81       	ld	r22, Z
    1322:	71 81       	ldd	r23, Z+1	; 0x01
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a ef       	ldi	r20, 0xFA	; 250
    132e:	54 e4       	ldi	r21, 0x44	; 68
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	f8 01       	movw	r30, r16
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	a2 83       	std	Z+2, r26	; 0x02
    1340:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1342:	fe 01       	movw	r30, r28
    1344:	e3 5b       	subi	r30, 0xB3	; 179
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e8       	ldi	r20, 0x80	; 128
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135c:	88 23       	and	r24, r24
    135e:	44 f4       	brge	.+16     	; 0x1370 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1360:	fe 01       	movw	r30, r28
    1362:	e5 5b       	subi	r30, 0xB5	; 181
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	64 c0       	rjmp	.+200    	; 0x1438 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1370:	fe 01       	movw	r30, r28
    1372:	e3 5b       	subi	r30, 0xB3	; 179
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	4f e7       	ldi	r20, 0x7F	; 127
    1384:	57 e4       	ldi	r21, 0x47	; 71
    1386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138a:	18 16       	cp	r1, r24
    138c:	0c f0       	brlt	.+2      	; 0x1390 <LCD_sendCommand+0xbe>
    138e:	43 c0       	rjmp	.+134    	; 0x1416 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1390:	fe 01       	movw	r30, r28
    1392:	ef 5a       	subi	r30, 0xAF	; 175
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	51 e4       	ldi	r21, 0x41	; 65
    13a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8e 01       	movw	r16, r28
    13b0:	05 5b       	subi	r16, 0xB5	; 181
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	f8 01       	movw	r30, r16
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
    13c6:	1f c0       	rjmp	.+62     	; 0x1406 <LCD_sendCommand+0x134>
    13c8:	fe 01       	movw	r30, r28
    13ca:	e7 5b       	subi	r30, 0xB7	; 183
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	88 ec       	ldi	r24, 0xC8	; 200
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	91 83       	std	Z+1, r25	; 0x01
    13d4:	80 83       	st	Z, r24
    13d6:	fe 01       	movw	r30, r28
    13d8:	e7 5b       	subi	r30, 0xB7	; 183
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <LCD_sendCommand+0x10e>
    13e4:	fe 01       	movw	r30, r28
    13e6:	e7 5b       	subi	r30, 0xB7	; 183
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	de 01       	movw	r26, r28
    13f0:	a5 5b       	subi	r26, 0xB5	; 181
    13f2:	bf 4f       	sbci	r27, 0xFF	; 255
    13f4:	fe 01       	movw	r30, r28
    13f6:	e5 5b       	subi	r30, 0xB5	; 181
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	9c 93       	st	X, r25
    1404:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1406:	fe 01       	movw	r30, r28
    1408:	e5 5b       	subi	r30, 0xB5	; 181
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	d1 f6       	brne	.-76     	; 0x13c8 <LCD_sendCommand+0xf6>
    1414:	27 c0       	rjmp	.+78     	; 0x1464 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1416:	8e 01       	movw	r16, r28
    1418:	05 5b       	subi	r16, 0xB5	; 181
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	fe 01       	movw	r30, r28
    141e:	e3 5b       	subi	r30, 0xB3	; 179
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	f8 01       	movw	r30, r16
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	80 83       	st	Z, r24
    1438:	de 01       	movw	r26, r28
    143a:	a9 5b       	subi	r26, 0xB9	; 185
    143c:	bf 4f       	sbci	r27, 0xFF	; 255
    143e:	fe 01       	movw	r30, r28
    1440:	e5 5b       	subi	r30, 0xB5	; 181
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	8d 93       	st	X+, r24
    144a:	9c 93       	st	X, r25
    144c:	fe 01       	movw	r30, r28
    144e:	e9 5b       	subi	r30, 0xB9	; 185
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <LCD_sendCommand+0x184>
    145a:	fe 01       	movw	r30, r28
    145c:	e9 5b       	subi	r30, 0xB9	; 185
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
	_delay_ms(1);                                                  /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);          /* Enable LCD E=1 */
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	65 e0       	ldi	r22, 0x05	; 5
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    146e:	fe 01       	movw	r30, r28
    1470:	ed 5b       	subi	r30, 0xBD	; 189
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a0 e8       	ldi	r26, 0x80	; 128
    147a:	bf e3       	ldi	r27, 0x3F	; 63
    147c:	80 83       	st	Z, r24
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	a2 83       	std	Z+2, r26	; 0x02
    1482:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1484:	8e 01       	movw	r16, r28
    1486:	01 5c       	subi	r16, 0xC1	; 193
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	fe 01       	movw	r30, r28
    148c:	ed 5b       	subi	r30, 0xBD	; 189
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	4a ef       	ldi	r20, 0xFA	; 250
    149e:	54 e4       	ldi	r21, 0x44	; 68
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	f8 01       	movw	r30, r16
    14aa:	80 83       	st	Z, r24
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	a2 83       	std	Z+2, r26	; 0x02
    14b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b2:	fe 01       	movw	r30, r28
    14b4:	ff 96       	adiw	r30, 0x3f	; 63
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <LCD_sendCommand+0x206>
		__ticks = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9e af       	std	Y+62, r25	; 0x3e
    14d4:	8d af       	std	Y+61, r24	; 0x3d
    14d6:	46 c0       	rjmp	.+140    	; 0x1564 <LCD_sendCommand+0x292>
	else if (__tmp > 65535)
    14d8:	fe 01       	movw	r30, r28
    14da:	ff 96       	adiw	r30, 0x3f	; 63
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    14e8:	4f e7       	ldi	r20, 0x7F	; 127
    14ea:	57 e4       	ldi	r21, 0x47	; 71
    14ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	64 f5       	brge	.+88     	; 0x154c <LCD_sendCommand+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	fe 01       	movw	r30, r28
    14f6:	ed 5b       	subi	r30, 0xBD	; 189
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e2       	ldi	r20, 0x20	; 32
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9e af       	std	Y+62, r25	; 0x3e
    1520:	8d af       	std	Y+61, r24	; 0x3d
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <LCD_sendCommand+0x270>
    1524:	88 ec       	ldi	r24, 0xC8	; 200
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9c af       	std	Y+60, r25	; 0x3c
    152a:	8b af       	std	Y+59, r24	; 0x3b
    152c:	8b ad       	ldd	r24, Y+59	; 0x3b
    152e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <LCD_sendCommand+0x25e>
    1534:	9c af       	std	Y+60, r25	; 0x3c
    1536:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	8d ad       	ldd	r24, Y+61	; 0x3d
    153a:	9e ad       	ldd	r25, Y+62	; 0x3e
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	9e af       	std	Y+62, r25	; 0x3e
    1540:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	8d ad       	ldd	r24, Y+61	; 0x3d
    1544:	9e ad       	ldd	r25, Y+62	; 0x3e
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f7       	brne	.-38     	; 0x1524 <LCD_sendCommand+0x252>
    154a:	16 c0       	rjmp	.+44     	; 0x1578 <LCD_sendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	fe 01       	movw	r30, r28
    154e:	ff 96       	adiw	r30, 0x3f	; 63
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9e af       	std	Y+62, r25	; 0x3e
    1562:	8d af       	std	Y+61, r24	; 0x3d
    1564:	8d ad       	ldd	r24, Y+61	; 0x3d
    1566:	9e ad       	ldd	r25, Y+62	; 0x3e
    1568:	9a af       	std	Y+58, r25	; 0x3a
    156a:	89 af       	std	Y+57, r24	; 0x39
    156c:	89 ad       	ldd	r24, Y+57	; 0x39
    156e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <LCD_sendCommand+0x29e>
    1574:	9a af       	std	Y+58, r25	; 0x3a
    1576:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);                                                  /* delay for processing Tpw - Tdws = 190ns */
#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1578:	fe 01       	movw	r30, r28
    157a:	eb 5a       	subi	r30, 0xAB	; 171
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	80 71       	andi	r24, 0x10	; 16
    1586:	90 70       	andi	r25, 0x00	; 0
    1588:	95 95       	asr	r25
    158a:	87 95       	ror	r24
    158c:	95 95       	asr	r25
    158e:	87 95       	ror	r24
    1590:	95 95       	asr	r25
    1592:	87 95       	ror	r24
    1594:	95 95       	asr	r25
    1596:	87 95       	ror	r24
    1598:	98 2f       	mov	r25, r24
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	63 e0       	ldi	r22, 0x03	; 3
    159e:	49 2f       	mov	r20, r25
    15a0:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    15a4:	fe 01       	movw	r30, r28
    15a6:	eb 5a       	subi	r30, 0xAB	; 171
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	80 81       	ld	r24, Z
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	80 72       	andi	r24, 0x20	; 32
    15b2:	90 70       	andi	r25, 0x00	; 0
    15b4:	95 95       	asr	r25
    15b6:	87 95       	ror	r24
    15b8:	95 95       	asr	r25
    15ba:	87 95       	ror	r24
    15bc:	95 95       	asr	r25
    15be:	87 95       	ror	r24
    15c0:	95 95       	asr	r25
    15c2:	87 95       	ror	r24
    15c4:	95 95       	asr	r25
    15c6:	87 95       	ror	r24
    15c8:	98 2f       	mov	r25, r24
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	62 e0       	ldi	r22, 0x02	; 2
    15ce:	49 2f       	mov	r20, r25
    15d0:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    15d4:	fe 01       	movw	r30, r28
    15d6:	eb 5a       	subi	r30, 0xAB	; 171
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	80 74       	andi	r24, 0x40	; 64
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	08 2e       	mov	r0, r24
    15e6:	89 2f       	mov	r24, r25
    15e8:	00 0c       	add	r0, r0
    15ea:	88 1f       	adc	r24, r24
    15ec:	99 0b       	sbc	r25, r25
    15ee:	00 0c       	add	r0, r0
    15f0:	88 1f       	adc	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	98 2f       	mov	r25, r24
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	49 2f       	mov	r20, r25
    15fc:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1600:	fe 01       	movw	r30, r28
    1602:	eb 5a       	subi	r30, 0xAB	; 171
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	98 2f       	mov	r25, r24
    160a:	99 1f       	adc	r25, r25
    160c:	99 27       	eor	r25, r25
    160e:	99 1f       	adc	r25, r25
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	49 2f       	mov	r20, r25
    1616:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);           /* Enable LCD E=0 */
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	65 e0       	ldi	r22, 0x05	; 5
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e8       	ldi	r26, 0x80	; 128
    162a:	bf e3       	ldi	r27, 0x3F	; 63
    162c:	8d ab       	std	Y+53, r24	; 0x35
    162e:	9e ab       	std	Y+54, r25	; 0x36
    1630:	af ab       	std	Y+55, r26	; 0x37
    1632:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	6d a9       	ldd	r22, Y+53	; 0x35
    1636:	7e a9       	ldd	r23, Y+54	; 0x36
    1638:	8f a9       	ldd	r24, Y+55	; 0x37
    163a:	98 ad       	ldd	r25, Y+56	; 0x38
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a ef       	ldi	r20, 0xFA	; 250
    1642:	54 e4       	ldi	r21, 0x44	; 68
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	89 ab       	std	Y+49, r24	; 0x31
    164e:	9a ab       	std	Y+50, r25	; 0x32
    1650:	ab ab       	std	Y+51, r26	; 0x33
    1652:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1654:	69 a9       	ldd	r22, Y+49	; 0x31
    1656:	7a a9       	ldd	r23, Y+50	; 0x32
    1658:	8b a9       	ldd	r24, Y+51	; 0x33
    165a:	9c a9       	ldd	r25, Y+52	; 0x34
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <LCD_sendCommand+0x3a4>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	98 ab       	std	Y+48, r25	; 0x30
    1672:	8f a7       	std	Y+47, r24	; 0x2f
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <LCD_sendCommand+0x422>
	else if (__tmp > 65535)
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	4c f5       	brge	.+82     	; 0x16e0 <LCD_sendCommand+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	6d a9       	ldd	r22, Y+53	; 0x35
    1690:	7e a9       	ldd	r23, Y+54	; 0x36
    1692:	8f a9       	ldd	r24, Y+55	; 0x37
    1694:	98 ad       	ldd	r25, Y+56	; 0x38
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	98 ab       	std	Y+48, r25	; 0x30
    16b4:	8f a7       	std	Y+47, r24	; 0x2f
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <LCD_sendCommand+0x404>
    16b8:	88 ec       	ldi	r24, 0xC8	; 200
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9e a7       	std	Y+46, r25	; 0x2e
    16be:	8d a7       	std	Y+45, r24	; 0x2d
    16c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    16c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_sendCommand+0x3f2>
    16c8:	9e a7       	std	Y+46, r25	; 0x2e
    16ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ce:	98 a9       	ldd	r25, Y+48	; 0x30
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	98 ab       	std	Y+48, r25	; 0x30
    16d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d8:	98 a9       	ldd	r25, Y+48	; 0x30
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <LCD_sendCommand+0x3e6>
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <LCD_sendCommand+0x436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	69 a9       	ldd	r22, Y+49	; 0x31
    16e2:	7a a9       	ldd	r23, Y+50	; 0x32
    16e4:	8b a9       	ldd	r24, Y+51	; 0x33
    16e6:	9c a9       	ldd	r25, Y+52	; 0x34
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	98 ab       	std	Y+48, r25	; 0x30
    16f2:	8f a7       	std	Y+47, r24	; 0x2f
    16f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f6:	98 a9       	ldd	r25, Y+48	; 0x30
    16f8:	9c a7       	std	Y+44, r25	; 0x2c
    16fa:	8b a7       	std	Y+43, r24	; 0x2b
    16fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_sendCommand+0x42e>
    1704:	9c a7       	std	Y+44, r25	; 0x2c
    1706:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                                  /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);          /* Enable LCD E=1 */
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	65 e0       	ldi	r22, 0x05	; 5
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e8       	ldi	r26, 0x80	; 128
    1718:	bf e3       	ldi	r27, 0x3F	; 63
    171a:	8f a3       	std	Y+39, r24	; 0x27
    171c:	98 a7       	std	Y+40, r25	; 0x28
    171e:	a9 a7       	std	Y+41, r26	; 0x29
    1720:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6f a1       	ldd	r22, Y+39	; 0x27
    1724:	78 a5       	ldd	r23, Y+40	; 0x28
    1726:	89 a5       	ldd	r24, Y+41	; 0x29
    1728:	9a a5       	ldd	r25, Y+42	; 0x2a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8b a3       	std	Y+35, r24	; 0x23
    173c:	9c a3       	std	Y+36, r25	; 0x24
    173e:	ad a3       	std	Y+37, r26	; 0x25
    1740:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1742:	6b a1       	ldd	r22, Y+35	; 0x23
    1744:	7c a1       	ldd	r23, Y+36	; 0x24
    1746:	8d a1       	ldd	r24, Y+37	; 0x25
    1748:	9e a1       	ldd	r25, Y+38	; 0x26
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <LCD_sendCommand+0x492>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9a a3       	std	Y+34, r25	; 0x22
    1760:	89 a3       	std	Y+33, r24	; 0x21
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <LCD_sendCommand+0x510>
	else if (__tmp > 65535)
    1764:	6b a1       	ldd	r22, Y+35	; 0x23
    1766:	7c a1       	ldd	r23, Y+36	; 0x24
    1768:	8d a1       	ldd	r24, Y+37	; 0x25
    176a:	9e a1       	ldd	r25, Y+38	; 0x26
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <LCD_sendCommand+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6f a1       	ldd	r22, Y+39	; 0x27
    177e:	78 a5       	ldd	r23, Y+40	; 0x28
    1780:	89 a5       	ldd	r24, Y+41	; 0x29
    1782:	9a a5       	ldd	r25, Y+42	; 0x2a
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	89 a3       	std	Y+33, r24	; 0x21
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <LCD_sendCommand+0x4f2>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	98 a3       	std	Y+32, r25	; 0x20
    17ac:	8f 8f       	std	Y+31, r24	; 0x1f
    17ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b0:	98 a1       	ldd	r25, Y+32	; 0x20
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_sendCommand+0x4e0>
    17b6:	98 a3       	std	Y+32, r25	; 0x20
    17b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	89 a1       	ldd	r24, Y+33	; 0x21
    17bc:	9a a1       	ldd	r25, Y+34	; 0x22
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9a a3       	std	Y+34, r25	; 0x22
    17c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <LCD_sendCommand+0x4d4>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <LCD_sendCommand+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6b a1       	ldd	r22, Y+35	; 0x23
    17d0:	7c a1       	ldd	r23, Y+36	; 0x24
    17d2:	8d a1       	ldd	r24, Y+37	; 0x25
    17d4:	9e a1       	ldd	r25, Y+38	; 0x26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9a a3       	std	Y+34, r25	; 0x22
    17e0:	89 a3       	std	Y+33, r24	; 0x21
    17e2:	89 a1       	ldd	r24, Y+33	; 0x21
    17e4:	9a a1       	ldd	r25, Y+34	; 0x22
    17e6:	9e 8f       	std	Y+30, r25	; 0x1e
    17e8:	8d 8f       	std	Y+29, r24	; 0x1d
    17ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_sendCommand+0x51c>
    17f2:	9e 8f       	std	Y+30, r25	; 0x1e
    17f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);                                                  /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    17f6:	fe 01       	movw	r30, r28
    17f8:	eb 5a       	subi	r30, 0xAB	; 171
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	80 81       	ld	r24, Z
    17fe:	98 2f       	mov	r25, r24
    1800:	91 70       	andi	r25, 0x01	; 1
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	63 e0       	ldi	r22, 0x03	; 3
    1806:	49 2f       	mov	r20, r25
    1808:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    180c:	fe 01       	movw	r30, r28
    180e:	eb 5a       	subi	r30, 0xAB	; 171
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 81       	ld	r24, Z
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	82 70       	andi	r24, 0x02	; 2
    181a:	90 70       	andi	r25, 0x00	; 0
    181c:	95 95       	asr	r25
    181e:	87 95       	ror	r24
    1820:	98 2f       	mov	r25, r24
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	49 2f       	mov	r20, r25
    1828:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    182c:	fe 01       	movw	r30, r28
    182e:	eb 5a       	subi	r30, 0xAB	; 171
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	84 70       	andi	r24, 0x04	; 4
    183a:	90 70       	andi	r25, 0x00	; 0
    183c:	95 95       	asr	r25
    183e:	87 95       	ror	r24
    1840:	95 95       	asr	r25
    1842:	87 95       	ror	r24
    1844:	98 2f       	mov	r25, r24
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	49 2f       	mov	r20, r25
    184c:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1850:	fe 01       	movw	r30, r28
    1852:	eb 5a       	subi	r30, 0xAB	; 171
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	88 70       	andi	r24, 0x08	; 8
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	95 95       	asr	r25
    1862:	87 95       	ror	r24
    1864:	95 95       	asr	r25
    1866:	87 95       	ror	r24
    1868:	95 95       	asr	r25
    186a:	87 95       	ror	r24
    186c:	98 2f       	mov	r25, r24
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	49 2f       	mov	r20, r25
    1874:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e8       	ldi	r26, 0x80	; 128
    187e:	bf e3       	ldi	r27, 0x3F	; 63
    1880:	89 8f       	std	Y+25, r24	; 0x19
    1882:	9a 8f       	std	Y+26, r25	; 0x1a
    1884:	ab 8f       	std	Y+27, r26	; 0x1b
    1886:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	69 8d       	ldd	r22, Y+25	; 0x19
    188a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a ef       	ldi	r20, 0xFA	; 250
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8d 8b       	std	Y+21, r24	; 0x15
    18a2:	9e 8b       	std	Y+22, r25	; 0x16
    18a4:	af 8b       	std	Y+23, r26	; 0x17
    18a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a8:	6d 89       	ldd	r22, Y+21	; 0x15
    18aa:	7e 89       	ldd	r23, Y+22	; 0x16
    18ac:	8f 89       	ldd	r24, Y+23	; 0x17
    18ae:	98 8d       	ldd	r25, Y+24	; 0x18
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18bc:	88 23       	and	r24, r24
    18be:	2c f4       	brge	.+10     	; 0x18ca <LCD_sendCommand+0x5f8>
		__ticks = 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    18ca:	6d 89       	ldd	r22, Y+21	; 0x15
    18cc:	7e 89       	ldd	r23, Y+22	; 0x16
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18de:	18 16       	cp	r1, r24
    18e0:	4c f5       	brge	.+82     	; 0x1934 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e2:	69 8d       	ldd	r22, Y+25	; 0x19
    18e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9c 8b       	std	Y+20, r25	; 0x14
    1908:	8b 8b       	std	Y+19, r24	; 0x13
    190a:	0f c0       	rjmp	.+30     	; 0x192a <LCD_sendCommand+0x658>
    190c:	88 ec       	ldi	r24, 0xC8	; 200
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9a 8b       	std	Y+18, r25	; 0x12
    1912:	89 8b       	std	Y+17, r24	; 0x11
    1914:	89 89       	ldd	r24, Y+17	; 0x11
    1916:	9a 89       	ldd	r25, Y+18	; 0x12
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_sendCommand+0x646>
    191c:	9a 8b       	std	Y+18, r25	; 0x12
    191e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	8b 89       	ldd	r24, Y+19	; 0x13
    1922:	9c 89       	ldd	r25, Y+20	; 0x14
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	9c 8b       	std	Y+20, r25	; 0x14
    1928:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192a:	8b 89       	ldd	r24, Y+19	; 0x13
    192c:	9c 89       	ldd	r25, Y+20	; 0x14
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	69 f7       	brne	.-38     	; 0x190c <LCD_sendCommand+0x63a>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	8b 89       	ldd	r24, Y+19	; 0x13
    194a:	9c 89       	ldd	r25, Y+20	; 0x14
    194c:	98 8b       	std	Y+16, r25	; 0x10
    194e:	8f 87       	std	Y+15, r24	; 0x0f
    1950:	8f 85       	ldd	r24, Y+15	; 0x0f
    1952:	98 89       	ldd	r25, Y+16	; 0x10
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_sendCommand+0x682>
    1958:	98 8b       	std	Y+16, r25	; 0x10
    195a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	65 e0       	ldi	r22, 0x05	; 5
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e8       	ldi	r26, 0x80	; 128
    196c:	bf e3       	ldi	r27, 0x3F	; 63
    196e:	8b 87       	std	Y+11, r24	; 0x0b
    1970:	9c 87       	std	Y+12, r25	; 0x0c
    1972:	ad 87       	std	Y+13, r26	; 0x0d
    1974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8f 83       	std	Y+7, r24	; 0x07
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	a9 87       	std	Y+9, r26	; 0x09
    1994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <LCD_sendCommand+0x6e6>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <LCD_sendCommand+0x764>
	else if (__tmp > 65535)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <LCD_sendCommand+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <LCD_sendCommand+0x746>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <LCD_sendCommand+0x734>
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <LCD_sendCommand+0x728>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <LCD_sendCommand+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_sendCommand+0x770>
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                                                  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);           /* Disable LCD E=0 */
	_delay_ms(1);                                                  /* delay for processing Th = 13ns */
#endif

}
    1a4a:	cb 5a       	subi	r28, 0xAB	; 171
    1a4c:	df 4f       	sbci	r29, 0xFF	; 255
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <LCD_displayCharacter>:
 *                       This Arg Indicate To The Data need to Display.
 *
 * [Return]        : Void
 */
void LCD_displayCharacter(uint8 data)
{
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	c3 56       	subi	r28, 0x63	; 99
    1a70:	d0 40       	sbci	r29, 0x00	; 0
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ed 59       	subi	r30, 0x9D	; 157
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);        /* Data Mode RS=1 */
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	66 e0       	ldi	r22, 0x06	; 6
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e1 5a       	subi	r30, 0xA1	; 161
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e8       	ldi	r26, 0x80	; 128
    1a9a:	bf e3       	ldi	r27, 0x3F	; 63
    1a9c:	80 83       	st	Z, r24
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	a2 83       	std	Z+2, r26	; 0x02
    1aa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	05 5a       	subi	r16, 0xA5	; 165
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e1 5a       	subi	r30, 0xA1	; 161
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a ef       	ldi	r20, 0xFA	; 250
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	f8 01       	movw	r30, r16
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e5 5a       	subi	r30, 0xA5	; 165
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	44 f4       	brge	.+16     	; 0x1b00 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1af0:	fe 01       	movw	r30, r28
    1af2:	e7 5a       	subi	r30, 0xA7	; 167
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
    1afe:	64 c0       	rjmp	.+200    	; 0x1bc8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1b00:	fe 01       	movw	r30, r28
    1b02:	e5 5a       	subi	r30, 0xA5	; 165
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	57 e4       	ldi	r21, 0x47	; 71
    1b16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <LCD_displayCharacter+0xbe>
    1b1e:	43 c0       	rjmp	.+134    	; 0x1ba6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	fe 01       	movw	r30, r28
    1b22:	e1 5a       	subi	r30, 0xA1	; 161
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8e 01       	movw	r16, r28
    1b40:	07 5a       	subi	r16, 0xA7	; 167
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	f8 01       	movw	r30, r16
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	1f c0       	rjmp	.+62     	; 0x1b96 <LCD_displayCharacter+0x134>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e9 5a       	subi	r30, 0xA9	; 169
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	88 ec       	ldi	r24, 0xC8	; 200
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
    1b66:	fe 01       	movw	r30, r28
    1b68:	e9 5a       	subi	r30, 0xA9	; 169
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_displayCharacter+0x10e>
    1b74:	fe 01       	movw	r30, r28
    1b76:	e9 5a       	subi	r30, 0xA9	; 169
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	de 01       	movw	r26, r28
    1b80:	a7 5a       	subi	r26, 0xA7	; 167
    1b82:	bf 4f       	sbci	r27, 0xFF	; 255
    1b84:	fe 01       	movw	r30, r28
    1b86:	e7 5a       	subi	r30, 0xA7	; 167
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	11 96       	adiw	r26, 0x01	; 1
    1b92:	9c 93       	st	X, r25
    1b94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	fe 01       	movw	r30, r28
    1b98:	e7 5a       	subi	r30, 0xA7	; 167
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	d1 f6       	brne	.-76     	; 0x1b58 <LCD_displayCharacter+0xf6>
    1ba4:	27 c0       	rjmp	.+78     	; 0x1bf4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	8e 01       	movw	r16, r28
    1ba8:	07 5a       	subi	r16, 0xA7	; 167
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	fe 01       	movw	r30, r28
    1bae:	e5 5a       	subi	r30, 0xA5	; 165
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    1bc8:	de 01       	movw	r26, r28
    1bca:	ab 5a       	subi	r26, 0xAB	; 171
    1bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e7 5a       	subi	r30, 0xA7	; 167
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	8d 93       	st	X+, r24
    1bda:	9c 93       	st	X, r25
    1bdc:	fe 01       	movw	r30, r28
    1bde:	eb 5a       	subi	r30, 0xAB	; 171
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_displayCharacter+0x184>
    1bea:	fe 01       	movw	r30, r28
    1bec:	eb 5a       	subi	r30, 0xAB	; 171
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
	_delay_ms(1);                                                  /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);          /* Enable LCD E=1 */
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	65 e0       	ldi	r22, 0x05	; 5
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ef 5a       	subi	r30, 0xAF	; 175
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a0 e8       	ldi	r26, 0x80	; 128
    1c0a:	bf e3       	ldi	r27, 0x3F	; 63
    1c0c:	80 83       	st	Z, r24
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	a2 83       	std	Z+2, r26	; 0x02
    1c12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	8e 01       	movw	r16, r28
    1c16:	03 5b       	subi	r16, 0xB3	; 179
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ef 5a       	subi	r30, 0xAF	; 175
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	f8 01       	movw	r30, r16
    1c3a:	80 83       	st	Z, r24
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	a2 83       	std	Z+2, r26	; 0x02
    1c40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c42:	fe 01       	movw	r30, r28
    1c44:	e3 5b       	subi	r30, 0xB3	; 179
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	44 f4       	brge	.+16     	; 0x1c70 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1c60:	fe 01       	movw	r30, r28
    1c62:	e5 5b       	subi	r30, 0xB5	; 181
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    1c6e:	64 c0       	rjmp	.+200    	; 0x1d38 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1c70:	fe 01       	movw	r30, r28
    1c72:	e3 5b       	subi	r30, 0xB3	; 179
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	0c f0       	brlt	.+2      	; 0x1c90 <LCD_displayCharacter+0x22e>
    1c8e:	43 c0       	rjmp	.+134    	; 0x1d16 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	fe 01       	movw	r30, r28
    1c92:	ef 5a       	subi	r30, 0xAF	; 175
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	8e 01       	movw	r16, r28
    1cb0:	05 5b       	subi	r16, 0xB5	; 181
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	1f c0       	rjmp	.+62     	; 0x1d06 <LCD_displayCharacter+0x2a4>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e7 5b       	subi	r30, 0xB7	; 183
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e7 5b       	subi	r30, 0xB7	; 183
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_displayCharacter+0x27e>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e7 5b       	subi	r30, 0xB7	; 183
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cee:	de 01       	movw	r26, r28
    1cf0:	a5 5b       	subi	r26, 0xB5	; 181
    1cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e5 5b       	subi	r30, 0xB5	; 181
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	11 96       	adiw	r26, 0x01	; 1
    1d02:	9c 93       	st	X, r25
    1d04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d06:	fe 01       	movw	r30, r28
    1d08:	e5 5b       	subi	r30, 0xB5	; 181
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	d1 f6       	brne	.-76     	; 0x1cc8 <LCD_displayCharacter+0x266>
    1d14:	27 c0       	rjmp	.+78     	; 0x1d64 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	8e 01       	movw	r16, r28
    1d18:	05 5b       	subi	r16, 0xB5	; 181
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e3 5b       	subi	r30, 0xB3	; 179
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	f8 01       	movw	r30, r16
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	de 01       	movw	r26, r28
    1d3a:	a9 5b       	subi	r26, 0xB9	; 185
    1d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e5 5b       	subi	r30, 0xB5	; 181
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	8d 93       	st	X+, r24
    1d4a:	9c 93       	st	X, r25
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e9 5b       	subi	r30, 0xB9	; 185
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_displayCharacter+0x2f4>
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e9 5b       	subi	r30, 0xB9	; 185
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	80 83       	st	Z, r24
	_delay_ms(1);                                                  /* delay for processing Tpw - Tdws = 190ns */
#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 59       	subi	r30, 0x9D	; 157
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	80 71       	andi	r24, 0x10	; 16
    1d72:	90 70       	andi	r25, 0x00	; 0
    1d74:	95 95       	asr	r25
    1d76:	87 95       	ror	r24
    1d78:	95 95       	asr	r25
    1d7a:	87 95       	ror	r24
    1d7c:	95 95       	asr	r25
    1d7e:	87 95       	ror	r24
    1d80:	95 95       	asr	r25
    1d82:	87 95       	ror	r24
    1d84:	98 2f       	mov	r25, r24
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	63 e0       	ldi	r22, 0x03	; 3
    1d8a:	49 2f       	mov	r20, r25
    1d8c:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1d90:	fe 01       	movw	r30, r28
    1d92:	ed 59       	subi	r30, 0x9D	; 157
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	80 72       	andi	r24, 0x20	; 32
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	95 95       	asr	r25
    1da2:	87 95       	ror	r24
    1da4:	95 95       	asr	r25
    1da6:	87 95       	ror	r24
    1da8:	95 95       	asr	r25
    1daa:	87 95       	ror	r24
    1dac:	95 95       	asr	r25
    1dae:	87 95       	ror	r24
    1db0:	95 95       	asr	r25
    1db2:	87 95       	ror	r24
    1db4:	98 2f       	mov	r25, r24
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	62 e0       	ldi	r22, 0x02	; 2
    1dba:	49 2f       	mov	r20, r25
    1dbc:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ed 59       	subi	r30, 0x9D	; 157
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	80 74       	andi	r24, 0x40	; 64
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	08 2e       	mov	r0, r24
    1dd2:	89 2f       	mov	r24, r25
    1dd4:	00 0c       	add	r0, r0
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	99 0b       	sbc	r25, r25
    1dda:	00 0c       	add	r0, r0
    1ddc:	88 1f       	adc	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	98 2f       	mov	r25, r24
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	49 2f       	mov	r20, r25
    1de8:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1dec:	fe 01       	movw	r30, r28
    1dee:	ed 59       	subi	r30, 0x9D	; 157
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	98 2f       	mov	r25, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	99 27       	eor	r25, r25
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	49 2f       	mov	r20, r25
    1e02:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1e06:	fe 01       	movw	r30, r28
    1e08:	ed 5b       	subi	r30, 0xBD	; 189
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 e8       	ldi	r26, 0x80	; 128
    1e12:	bf e3       	ldi	r27, 0x3F	; 63
    1e14:	80 83       	st	Z, r24
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	a2 83       	std	Z+2, r26	; 0x02
    1e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	01 5c       	subi	r16, 0xC1	; 193
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	ed 5b       	subi	r30, 0xBD	; 189
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	a2 83       	std	Z+2, r26	; 0x02
    1e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ff 96       	adiw	r30, 0x3f	; 63
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9e af       	std	Y+62, r25	; 0x3e
    1e6c:	8d af       	std	Y+61, r24	; 0x3d
    1e6e:	46 c0       	rjmp	.+140    	; 0x1efc <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    1e70:	fe 01       	movw	r30, r28
    1e72:	ff 96       	adiw	r30, 0x3f	; 63
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	57 e4       	ldi	r21, 0x47	; 71
    1e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e88:	18 16       	cp	r1, r24
    1e8a:	64 f5       	brge	.+88     	; 0x1ee4 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ed 5b       	subi	r30, 0xBD	; 189
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9e af       	std	Y+62, r25	; 0x3e
    1eb8:	8d af       	std	Y+61, r24	; 0x3d
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_displayCharacter+0x478>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c af       	std	Y+60, r25	; 0x3c
    1ec2:	8b af       	std	Y+59, r24	; 0x3b
    1ec4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ec6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_displayCharacter+0x466>
    1ecc:	9c af       	std	Y+60, r25	; 0x3c
    1ece:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9e af       	std	Y+62, r25	; 0x3e
    1ed8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8d ad       	ldd	r24, Y+61	; 0x3d
    1edc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_displayCharacter+0x45a>
    1ee2:	16 c0       	rjmp	.+44     	; 0x1f10 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ff 96       	adiw	r30, 0x3f	; 63
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e af       	std	Y+62, r25	; 0x3e
    1efa:	8d af       	std	Y+61, r24	; 0x3d
    1efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f00:	9a af       	std	Y+58, r25	; 0x3a
    1f02:	89 af       	std	Y+57, r24	; 0x39
    1f04:	89 ad       	ldd	r24, Y+57	; 0x39
    1f06:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0x4a6>
    1f0c:	9a af       	std	Y+58, r25	; 0x3a
    1f0e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);                                                 /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);          /* Disable LCD E=0 */
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	65 e0       	ldi	r22, 0x05	; 5
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	8d ab       	std	Y+53, r24	; 0x35
    1f24:	9e ab       	std	Y+54, r25	; 0x36
    1f26:	af ab       	std	Y+55, r26	; 0x37
    1f28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f30:	98 ad       	ldd	r25, Y+56	; 0x38
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a ef       	ldi	r20, 0xFA	; 250
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	89 ab       	std	Y+49, r24	; 0x31
    1f44:	9a ab       	std	Y+50, r25	; 0x32
    1f46:	ab ab       	std	Y+51, r26	; 0x33
    1f48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f50:	9c a9       	ldd	r25, Y+52	; 0x34
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	98 ab       	std	Y+48, r25	; 0x30
    1f68:	8f a7       	std	Y+47, r24	; 0x2f
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    1f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f70:	8b a9       	ldd	r24, Y+51	; 0x33
    1f72:	9c a9       	ldd	r25, Y+52	; 0x34
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <LCD_displayCharacter+0x56a>
    1fae:	88 ec       	ldi	r24, 0xC8	; 200
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e a7       	std	Y+46, r25	; 0x2e
    1fb4:	8d a7       	std	Y+45, r24	; 0x2d
    1fb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_displayCharacter+0x558>
    1fbe:	9e a7       	std	Y+46, r25	; 0x2e
    1fc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	98 ab       	std	Y+48, r25	; 0x30
    1fca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fce:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <LCD_displayCharacter+0x54c>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fda:	8b a9       	ldd	r24, Y+51	; 0x33
    1fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	98 ab       	std	Y+48, r25	; 0x30
    1fe8:	8f a7       	std	Y+47, r24	; 0x2f
    1fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fec:	98 a9       	ldd	r25, Y+48	; 0x30
    1fee:	9c a7       	std	Y+44, r25	; 0x2c
    1ff0:	8b a7       	std	Y+43, r24	; 0x2b
    1ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_displayCharacter+0x594>
    1ffa:	9c a7       	std	Y+44, r25	; 0x2c
    1ffc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                                 /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);         /* Enable LCD E=1 */
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	65 e0       	ldi	r22, 0x05	; 5
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e8       	ldi	r26, 0x80	; 128
    200e:	bf e3       	ldi	r27, 0x3F	; 63
    2010:	8f a3       	std	Y+39, r24	; 0x27
    2012:	98 a7       	std	Y+40, r25	; 0x28
    2014:	a9 a7       	std	Y+41, r26	; 0x29
    2016:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	6f a1       	ldd	r22, Y+39	; 0x27
    201a:	78 a5       	ldd	r23, Y+40	; 0x28
    201c:	89 a5       	ldd	r24, Y+41	; 0x29
    201e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a ef       	ldi	r20, 0xFA	; 250
    2026:	54 e4       	ldi	r21, 0x44	; 68
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	8b a3       	std	Y+35, r24	; 0x23
    2032:	9c a3       	std	Y+36, r25	; 0x24
    2034:	ad a3       	std	Y+37, r26	; 0x25
    2036:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2038:	6b a1       	ldd	r22, Y+35	; 0x23
    203a:	7c a1       	ldd	r23, Y+36	; 0x24
    203c:	8d a1       	ldd	r24, Y+37	; 0x25
    203e:	9e a1       	ldd	r25, Y+38	; 0x26
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	2c f4       	brge	.+10     	; 0x205a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9a a3       	std	Y+34, r25	; 0x22
    2056:	89 a3       	std	Y+33, r24	; 0x21
    2058:	3f c0       	rjmp	.+126    	; 0x20d8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    205a:	6b a1       	ldd	r22, Y+35	; 0x23
    205c:	7c a1       	ldd	r23, Y+36	; 0x24
    205e:	8d a1       	ldd	r24, Y+37	; 0x25
    2060:	9e a1       	ldd	r25, Y+38	; 0x26
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	4c f5       	brge	.+82     	; 0x20c4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2072:	6f a1       	ldd	r22, Y+39	; 0x27
    2074:	78 a5       	ldd	r23, Y+40	; 0x28
    2076:	89 a5       	ldd	r24, Y+41	; 0x29
    2078:	9a a5       	ldd	r25, Y+42	; 0x2a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <LCD_displayCharacter+0x658>
    209c:	88 ec       	ldi	r24, 0xC8	; 200
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	98 a3       	std	Y+32, r25	; 0x20
    20a2:	8f 8f       	std	Y+31, r24	; 0x1f
    20a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a6:	98 a1       	ldd	r25, Y+32	; 0x20
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_displayCharacter+0x646>
    20ac:	98 a3       	std	Y+32, r25	; 0x20
    20ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b0:	89 a1       	ldd	r24, Y+33	; 0x21
    20b2:	9a a1       	ldd	r25, Y+34	; 0x22
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	89 a1       	ldd	r24, Y+33	; 0x21
    20bc:	9a a1       	ldd	r25, Y+34	; 0x22
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	69 f7       	brne	.-38     	; 0x209c <LCD_displayCharacter+0x63a>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	6b a1       	ldd	r22, Y+35	; 0x23
    20c6:	7c a1       	ldd	r23, Y+36	; 0x24
    20c8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ca:	9e a1       	ldd	r25, Y+38	; 0x26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9a a3       	std	Y+34, r25	; 0x22
    20d6:	89 a3       	std	Y+33, r24	; 0x21
    20d8:	89 a1       	ldd	r24, Y+33	; 0x21
    20da:	9a a1       	ldd	r25, Y+34	; 0x22
    20dc:	9e 8f       	std	Y+30, r25	; 0x1e
    20de:	8d 8f       	std	Y+29, r24	; 0x1d
    20e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <LCD_displayCharacter+0x682>
    20e8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);                                                 /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    20ec:	fe 01       	movw	r30, r28
    20ee:	ed 59       	subi	r30, 0x9D	; 157
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	98 2f       	mov	r25, r24
    20f6:	91 70       	andi	r25, 0x01	; 1
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	63 e0       	ldi	r22, 0x03	; 3
    20fc:	49 2f       	mov	r20, r25
    20fe:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2102:	fe 01       	movw	r30, r28
    2104:	ed 59       	subi	r30, 0x9D	; 157
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	82 70       	andi	r24, 0x02	; 2
    2110:	90 70       	andi	r25, 0x00	; 0
    2112:	95 95       	asr	r25
    2114:	87 95       	ror	r24
    2116:	98 2f       	mov	r25, r24
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	49 2f       	mov	r20, r25
    211e:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2122:	fe 01       	movw	r30, r28
    2124:	ed 59       	subi	r30, 0x9D	; 157
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	84 70       	andi	r24, 0x04	; 4
    2130:	90 70       	andi	r25, 0x00	; 0
    2132:	95 95       	asr	r25
    2134:	87 95       	ror	r24
    2136:	95 95       	asr	r25
    2138:	87 95       	ror	r24
    213a:	98 2f       	mov	r25, r24
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	49 2f       	mov	r20, r25
    2142:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2146:	fe 01       	movw	r30, r28
    2148:	ed 59       	subi	r30, 0x9D	; 157
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	88 70       	andi	r24, 0x08	; 8
    2154:	90 70       	andi	r25, 0x00	; 0
    2156:	95 95       	asr	r25
    2158:	87 95       	ror	r24
    215a:	95 95       	asr	r25
    215c:	87 95       	ror	r24
    215e:	95 95       	asr	r25
    2160:	87 95       	ror	r24
    2162:	98 2f       	mov	r25, r24
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	49 2f       	mov	r20, r25
    216a:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e8       	ldi	r26, 0x80	; 128
    2174:	bf e3       	ldi	r27, 0x3F	; 63
    2176:	89 8f       	std	Y+25, r24	; 0x19
    2178:	9a 8f       	std	Y+26, r25	; 0x1a
    217a:	ab 8f       	std	Y+27, r26	; 0x1b
    217c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	69 8d       	ldd	r22, Y+25	; 0x19
    2180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a ef       	ldi	r20, 0xFA	; 250
    218c:	54 e4       	ldi	r21, 0x44	; 68
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8d 8b       	std	Y+21, r24	; 0x15
    2198:	9e 8b       	std	Y+22, r25	; 0x16
    219a:	af 8b       	std	Y+23, r26	; 0x17
    219c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	3f c0       	rjmp	.+126    	; 0x223e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	69 8d       	ldd	r22, Y+25	; 0x19
    21da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9c 8b       	std	Y+20, r25	; 0x14
    21fe:	8b 8b       	std	Y+19, r24	; 0x13
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <LCD_displayCharacter+0x7be>
    2202:	88 ec       	ldi	r24, 0xC8	; 200
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a 8b       	std	Y+18, r25	; 0x12
    2208:	89 8b       	std	Y+17, r24	; 0x11
    220a:	89 89       	ldd	r24, Y+17	; 0x11
    220c:	9a 89       	ldd	r25, Y+18	; 0x12
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_displayCharacter+0x7ac>
    2212:	9a 8b       	std	Y+18, r25	; 0x12
    2214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <LCD_displayCharacter+0x7a0>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	98 8b       	std	Y+16, r25	; 0x10
    2244:	8f 87       	std	Y+15, r24	; 0x0f
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	98 89       	ldd	r25, Y+16	; 0x10
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_displayCharacter+0x7e8>
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);                                                 /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);          /* Disable LCD E=0 */
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	65 e0       	ldi	r22, 0x05	; 5
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 48 13 	call	0x2690	; 0x2690 <GPIO_writePin>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	8b 87       	std	Y+11, r24	; 0x0b
    2266:	9c 87       	std	Y+12, r25	; 0x0c
    2268:	ad 87       	std	Y+13, r26	; 0x0d
    226a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8f 83       	std	Y+7, r24	; 0x07
    2286:	98 87       	std	Y+8, r25	; 0x08
    2288:	a9 87       	std	Y+9, r26	; 0x09
    228a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_displayCharacter+0x84c>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_displayCharacter+0x8ac>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_displayCharacter+0x89a>
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_displayCharacter+0x88e>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_displayCharacter+0x8d6>
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data);                         /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);                                                  /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);           /* Disable LCD E=0 */
	_delay_ms(1);                                                  /* delay for processing Th = 13ns */
#endif
}
    2340:	cd 59       	subi	r28, 0x9D	; 157
    2342:	df 4f       	sbci	r29, 0xFF	; 255
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret

00002358 <LCD_displayString>:
 *                       This Arg Receive the Address Of the String need to Display.
 *
 * [Return]        : Void
 */
void LCD_displayString(const uint8 *str_ptr)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <LCD_displayString+0x6>
    235e:	0f 92       	push	r0
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	9b 83       	std	Y+3, r25	; 0x03
    2366:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2368:	19 82       	std	Y+1, r1	; 0x01
    236a:	0e c0       	rjmp	.+28     	; 0x2388 <LCD_displayString+0x30>
	while(str_ptr[i] != '\0')
	{
		LCD_displayCharacter(str_ptr[i]);
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	80 81       	ld	r24, Z
    237e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <LCD_displayCharacter>
		i++;
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	89 83       	std	Y+1, r24	; 0x01
 * [Return]        : Void
 */
void LCD_displayString(const uint8 *str_ptr)
{
	uint8 i = 0;
	while(str_ptr[i] != '\0')
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	9b 81       	ldd	r25, Y+3	; 0x03
    2392:	fc 01       	movw	r30, r24
    2394:	e2 0f       	add	r30, r18
    2396:	f3 1f       	adc	r31, r19
    2398:	80 81       	ld	r24, Z
    239a:	88 23       	and	r24, r24
    239c:	39 f7       	brne	.-50     	; 0x236c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str_ptr[i]);
		i++;
	}
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <LCD_moveCursor>:
 *            uint8 col:
 *                       This Arg Indicate To The Number of Column.
 * [Return]        : Void
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <LCD_moveCursor+0x6>
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <LCD_moveCursor+0x8>
    23b2:	0f 92       	push	r0
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	8a 83       	std	Y+2, r24	; 0x02
    23ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memory_address;
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	3d 83       	std	Y+5, r19	; 0x05
    23c4:	2c 83       	std	Y+4, r18	; 0x04
    23c6:	8c 81       	ldd	r24, Y+4	; 0x04
    23c8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	91 05       	cpc	r25, r1
    23ce:	c1 f0       	breq	.+48     	; 0x2400 <LCD_moveCursor+0x56>
    23d0:	2c 81       	ldd	r18, Y+4	; 0x04
    23d2:	3d 81       	ldd	r19, Y+5	; 0x05
    23d4:	22 30       	cpi	r18, 0x02	; 2
    23d6:	31 05       	cpc	r19, r1
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <LCD_moveCursor+0x3a>
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	9d 81       	ldd	r25, Y+5	; 0x05
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	61 f0       	breq	.+24     	; 0x23fa <LCD_moveCursor+0x50>
    23e2:	19 c0       	rjmp	.+50     	; 0x2416 <LCD_moveCursor+0x6c>
    23e4:	2c 81       	ldd	r18, Y+4	; 0x04
    23e6:	3d 81       	ldd	r19, Y+5	; 0x05
    23e8:	22 30       	cpi	r18, 0x02	; 2
    23ea:	31 05       	cpc	r19, r1
    23ec:	69 f0       	breq	.+26     	; 0x2408 <LCD_moveCursor+0x5e>
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	9d 81       	ldd	r25, Y+5	; 0x05
    23f2:	83 30       	cpi	r24, 0x03	; 3
    23f4:	91 05       	cpc	r25, r1
    23f6:	61 f0       	breq	.+24     	; 0x2410 <LCD_moveCursor+0x66>
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_memory_address = col;
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	0b c0       	rjmp	.+22     	; 0x2416 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_memory_address = col + 0x40;
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	80 5c       	subi	r24, 0xC0	; 192
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	07 c0       	rjmp	.+14     	; 0x2416 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_memory_address = col + 0x10;
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	80 5f       	subi	r24, 0xF0	; 240
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_memory_address = col + 0x50;
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	80 5b       	subi	r24, 0xB0	; 176
    2414:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_memory_address | LCD_Cursor_position);
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	80 68       	ori	r24, 0x80	; 128
    241a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_sendCommand>

}
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <LCD_displayStringRowColumn>:
 *                       This Arg Receive the Address Of the String need to Display.
 *
 * [Return]        : Void
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const uint8 *str_ptr)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	00 d0       	rcall	.+0      	; 0x2434 <LCD_displayStringRowColumn+0x6>
    2434:	00 d0       	rcall	.+0      	; 0x2436 <LCD_displayStringRowColumn+0x8>
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	6a 83       	std	Y+2, r22	; 0x02
    243e:	5c 83       	std	Y+4, r21	; 0x04
    2440:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);            /* go to to the required LCD position */
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	6a 81       	ldd	r22, Y+2	; 0x02
    2446:	0e 94 d5 11 	call	0x23aa	; 0x23aa <LCD_moveCursor>
	LCD_displayString(str_ptr);         /* display the string */
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	0e 94 ac 11 	call	0x2358	; 0x2358 <LCD_displayString>
}
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_intgerToString>:
 *                       This Arg Indicate To The Decimal Data.
 *
 * [Return]        : Void
 */
void LCD_intgerToString(int data)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	62 97       	sbiw	r28, 0x12	; 18
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	9a 8b       	std	Y+18, r25	; 0x12
    2476:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16];                 /*String to hold the ascii result*/
	itoa(data,buff,10);             /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2478:	89 89       	ldd	r24, Y+17	; 0x11
    247a:	9a 89       	ldd	r25, Y+18	; 0x12
    247c:	9e 01       	movw	r18, r28
    247e:	2f 5f       	subi	r18, 0xFF	; 255
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
    2482:	b9 01       	movw	r22, r18
    2484:	4a e0       	ldi	r20, 0x0A	; 10
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	0e 94 e7 17 	call	0x2fce	; 0x2fce <itoa>
	LCD_displayString(buff);        /* Display the string */
    248c:	ce 01       	movw	r24, r28
    248e:	01 96       	adiw	r24, 0x01	; 1
    2490:	0e 94 ac 11 	call	0x2358	; 0x2358 <LCD_displayString>
}
    2494:	62 96       	adiw	r28, 0x12	; 18
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <LCD_clearScreen>:
 *[ARG]            : NO ARG
 *
 * [Return]        : Void
 */
void LCD_clearScreen(void)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_Clear_Display_Screen);  /* Send clear display command */
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_sendCommand>
}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <GPIO_setupPinDirection+0x6>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <GPIO_setupPinDirection+0x8>
    24c2:	0f 92       	push	r0
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	6a 83       	std	Y+2, r22	; 0x02
    24cc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	88 30       	cpi	r24, 0x08	; 8
    24d2:	08 f0       	brcs	.+2      	; 0x24d6 <GPIO_setupPinDirection+0x1c>
    24d4:	d5 c0       	rjmp	.+426    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	84 30       	cpi	r24, 0x04	; 4
    24da:	08 f0       	brcs	.+2      	; 0x24de <GPIO_setupPinDirection+0x24>
    24dc:	d1 c0       	rjmp	.+418    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	3d 83       	std	Y+5, r19	; 0x05
    24e6:	2c 83       	std	Y+4, r18	; 0x04
    24e8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ea:	9d 81       	ldd	r25, Y+5	; 0x05
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	91 05       	cpc	r25, r1
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <GPIO_setupPinDirection+0x3a>
    24f2:	43 c0       	rjmp	.+134    	; 0x257a <GPIO_setupPinDirection+0xc0>
    24f4:	2c 81       	ldd	r18, Y+4	; 0x04
    24f6:	3d 81       	ldd	r19, Y+5	; 0x05
    24f8:	22 30       	cpi	r18, 0x02	; 2
    24fa:	31 05       	cpc	r19, r1
    24fc:	2c f4       	brge	.+10     	; 0x2508 <GPIO_setupPinDirection+0x4e>
    24fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2500:	9d 81       	ldd	r25, Y+5	; 0x05
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	71 f0       	breq	.+28     	; 0x2522 <GPIO_setupPinDirection+0x68>
    2506:	bc c0       	rjmp	.+376    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
    2508:	2c 81       	ldd	r18, Y+4	; 0x04
    250a:	3d 81       	ldd	r19, Y+5	; 0x05
    250c:	22 30       	cpi	r18, 0x02	; 2
    250e:	31 05       	cpc	r19, r1
    2510:	09 f4       	brne	.+2      	; 0x2514 <GPIO_setupPinDirection+0x5a>
    2512:	5f c0       	rjmp	.+190    	; 0x25d2 <GPIO_setupPinDirection+0x118>
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	9d 81       	ldd	r25, Y+5	; 0x05
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	91 05       	cpc	r25, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <GPIO_setupPinDirection+0x66>
    251e:	85 c0       	rjmp	.+266    	; 0x262a <GPIO_setupPinDirection+0x170>
    2520:	af c0       	rjmp	.+350    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	81 30       	cpi	r24, 0x01	; 1
    2526:	a1 f4       	brne	.+40     	; 0x2550 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2528:	aa e3       	ldi	r26, 0x3A	; 58
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	ea e3       	ldi	r30, 0x3A	; 58
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	48 2f       	mov	r20, r24
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	02 2e       	mov	r0, r18
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <GPIO_setupPinDirection+0x8c>
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	0a 94       	dec	r0
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <GPIO_setupPinDirection+0x88>
    254a:	84 2b       	or	r24, r20
    254c:	8c 93       	st	X, r24
    254e:	98 c0       	rjmp	.+304    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2550:	aa e3       	ldi	r26, 0x3A	; 58
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	ea e3       	ldi	r30, 0x3A	; 58
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	48 2f       	mov	r20, r24
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	02 2e       	mov	r0, r18
    2568:	02 c0       	rjmp	.+4      	; 0x256e <GPIO_setupPinDirection+0xb4>
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	0a 94       	dec	r0
    2570:	e2 f7       	brpl	.-8      	; 0x256a <GPIO_setupPinDirection+0xb0>
    2572:	80 95       	com	r24
    2574:	84 23       	and	r24, r20
    2576:	8c 93       	st	X, r24
    2578:	83 c0       	rjmp	.+262    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	a1 f4       	brne	.+40     	; 0x25a8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2580:	a7 e3       	ldi	r26, 0x37	; 55
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e7 e3       	ldi	r30, 0x37	; 55
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	48 2f       	mov	r20, r24
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 2e       	mov	r0, r18
    2598:	02 c0       	rjmp	.+4      	; 0x259e <GPIO_setupPinDirection+0xe4>
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	0a 94       	dec	r0
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <GPIO_setupPinDirection+0xe0>
    25a2:	84 2b       	or	r24, r20
    25a4:	8c 93       	st	X, r24
    25a6:	6c c0       	rjmp	.+216    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    25a8:	a7 e3       	ldi	r26, 0x37	; 55
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e7 e3       	ldi	r30, 0x37	; 55
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	48 2f       	mov	r20, r24
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	02 2e       	mov	r0, r18
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <GPIO_setupPinDirection+0x10c>
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	0a 94       	dec	r0
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <GPIO_setupPinDirection+0x108>
    25ca:	80 95       	com	r24
    25cc:	84 23       	and	r24, r20
    25ce:	8c 93       	st	X, r24
    25d0:	57 c0       	rjmp	.+174    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	a1 f4       	brne	.+40     	; 0x2600 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    25d8:	a4 e3       	ldi	r26, 0x34	; 52
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e4 e3       	ldi	r30, 0x34	; 52
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	48 2f       	mov	r20, r24
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	02 2e       	mov	r0, r18
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <GPIO_setupPinDirection+0x13c>
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	0a 94       	dec	r0
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <GPIO_setupPinDirection+0x138>
    25fa:	84 2b       	or	r24, r20
    25fc:	8c 93       	st	X, r24
    25fe:	40 c0       	rjmp	.+128    	; 0x2680 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2600:	a4 e3       	ldi	r26, 0x34	; 52
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e4 e3       	ldi	r30, 0x34	; 52
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	48 2f       	mov	r20, r24
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	02 2e       	mov	r0, r18
    2618:	02 c0       	rjmp	.+4      	; 0x261e <GPIO_setupPinDirection+0x164>
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	0a 94       	dec	r0
    2620:	e2 f7       	brpl	.-8      	; 0x261a <GPIO_setupPinDirection+0x160>
    2622:	80 95       	com	r24
    2624:	84 23       	and	r24, r20
    2626:	8c 93       	st	X, r24
    2628:	2b c0       	rjmp	.+86     	; 0x2680 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	81 30       	cpi	r24, 0x01	; 1
    262e:	a1 f4       	brne	.+40     	; 0x2658 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2630:	a1 e3       	ldi	r26, 0x31	; 49
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e1 e3       	ldi	r30, 0x31	; 49
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	48 2f       	mov	r20, r24
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	02 2e       	mov	r0, r18
    2648:	02 c0       	rjmp	.+4      	; 0x264e <GPIO_setupPinDirection+0x194>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	0a 94       	dec	r0
    2650:	e2 f7       	brpl	.-8      	; 0x264a <GPIO_setupPinDirection+0x190>
    2652:	84 2b       	or	r24, r20
    2654:	8c 93       	st	X, r24
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2658:	a1 e3       	ldi	r26, 0x31	; 49
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e1 e3       	ldi	r30, 0x31	; 49
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	48 2f       	mov	r20, r24
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	02 2e       	mov	r0, r18
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <GPIO_setupPinDirection+0x1bc>
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	0a 94       	dec	r0
    2678:	e2 f7       	brpl	.-8      	; 0x2672 <GPIO_setupPinDirection+0x1b8>
    267a:	80 95       	com	r24
    267c:	84 23       	and	r24, r20
    267e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	00 d0       	rcall	.+0      	; 0x2696 <GPIO_writePin+0x6>
    2696:	00 d0       	rcall	.+0      	; 0x2698 <GPIO_writePin+0x8>
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	6a 83       	std	Y+2, r22	; 0x02
    26a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	88 30       	cpi	r24, 0x08	; 8
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <GPIO_writePin+0x1c>
    26aa:	d5 c0       	rjmp	.+426    	; 0x2856 <GPIO_writePin+0x1c6>
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	84 30       	cpi	r24, 0x04	; 4
    26b0:	08 f0       	brcs	.+2      	; 0x26b4 <GPIO_writePin+0x24>
    26b2:	d1 c0       	rjmp	.+418    	; 0x2856 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	3d 83       	std	Y+5, r19	; 0x05
    26bc:	2c 83       	std	Y+4, r18	; 0x04
    26be:	8c 81       	ldd	r24, Y+4	; 0x04
    26c0:	9d 81       	ldd	r25, Y+5	; 0x05
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	91 05       	cpc	r25, r1
    26c6:	09 f4       	brne	.+2      	; 0x26ca <GPIO_writePin+0x3a>
    26c8:	43 c0       	rjmp	.+134    	; 0x2750 <GPIO_writePin+0xc0>
    26ca:	2c 81       	ldd	r18, Y+4	; 0x04
    26cc:	3d 81       	ldd	r19, Y+5	; 0x05
    26ce:	22 30       	cpi	r18, 0x02	; 2
    26d0:	31 05       	cpc	r19, r1
    26d2:	2c f4       	brge	.+10     	; 0x26de <GPIO_writePin+0x4e>
    26d4:	8c 81       	ldd	r24, Y+4	; 0x04
    26d6:	9d 81       	ldd	r25, Y+5	; 0x05
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	71 f0       	breq	.+28     	; 0x26f8 <GPIO_writePin+0x68>
    26dc:	bc c0       	rjmp	.+376    	; 0x2856 <GPIO_writePin+0x1c6>
    26de:	2c 81       	ldd	r18, Y+4	; 0x04
    26e0:	3d 81       	ldd	r19, Y+5	; 0x05
    26e2:	22 30       	cpi	r18, 0x02	; 2
    26e4:	31 05       	cpc	r19, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <GPIO_writePin+0x5a>
    26e8:	5f c0       	rjmp	.+190    	; 0x27a8 <GPIO_writePin+0x118>
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	91 05       	cpc	r25, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <GPIO_writePin+0x66>
    26f4:	85 c0       	rjmp	.+266    	; 0x2800 <GPIO_writePin+0x170>
    26f6:	af c0       	rjmp	.+350    	; 0x2856 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	a1 f4       	brne	.+40     	; 0x2726 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    26fe:	ab e3       	ldi	r26, 0x3B	; 59
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	eb e3       	ldi	r30, 0x3B	; 59
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <GPIO_writePin+0x8c>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <GPIO_writePin+0x88>
    2720:	84 2b       	or	r24, r20
    2722:	8c 93       	st	X, r24
    2724:	98 c0       	rjmp	.+304    	; 0x2856 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2726:	ab e3       	ldi	r26, 0x3B	; 59
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	eb e3       	ldi	r30, 0x3B	; 59
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	48 2f       	mov	r20, r24
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	02 2e       	mov	r0, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <GPIO_writePin+0xb4>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <GPIO_writePin+0xb0>
    2748:	80 95       	com	r24
    274a:	84 23       	and	r24, r20
    274c:	8c 93       	st	X, r24
    274e:	83 c0       	rjmp	.+262    	; 0x2856 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	81 30       	cpi	r24, 0x01	; 1
    2754:	a1 f4       	brne	.+40     	; 0x277e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2756:	a8 e3       	ldi	r26, 0x38	; 56
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e8 e3       	ldi	r30, 0x38	; 56
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	48 2f       	mov	r20, r24
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 2e       	mov	r0, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <GPIO_writePin+0xe4>
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	0a 94       	dec	r0
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <GPIO_writePin+0xe0>
    2778:	84 2b       	or	r24, r20
    277a:	8c 93       	st	X, r24
    277c:	6c c0       	rjmp	.+216    	; 0x2856 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    277e:	a8 e3       	ldi	r26, 0x38	; 56
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e8 e3       	ldi	r30, 0x38	; 56
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	48 2f       	mov	r20, r24
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	02 2e       	mov	r0, r18
    2796:	02 c0       	rjmp	.+4      	; 0x279c <GPIO_writePin+0x10c>
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	0a 94       	dec	r0
    279e:	e2 f7       	brpl	.-8      	; 0x2798 <GPIO_writePin+0x108>
    27a0:	80 95       	com	r24
    27a2:	84 23       	and	r24, r20
    27a4:	8c 93       	st	X, r24
    27a6:	57 c0       	rjmp	.+174    	; 0x2856 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	a1 f4       	brne	.+40     	; 0x27d6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    27ae:	a5 e3       	ldi	r26, 0x35	; 53
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e3       	ldi	r30, 0x35	; 53
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	48 2f       	mov	r20, r24
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	02 2e       	mov	r0, r18
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <GPIO_writePin+0x13c>
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	0a 94       	dec	r0
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <GPIO_writePin+0x138>
    27d0:	84 2b       	or	r24, r20
    27d2:	8c 93       	st	X, r24
    27d4:	40 c0       	rjmp	.+128    	; 0x2856 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    27d6:	a5 e3       	ldi	r26, 0x35	; 53
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e5 e3       	ldi	r30, 0x35	; 53
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	48 2f       	mov	r20, r24
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	02 2e       	mov	r0, r18
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <GPIO_writePin+0x164>
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	0a 94       	dec	r0
    27f6:	e2 f7       	brpl	.-8      	; 0x27f0 <GPIO_writePin+0x160>
    27f8:	80 95       	com	r24
    27fa:	84 23       	and	r24, r20
    27fc:	8c 93       	st	X, r24
    27fe:	2b c0       	rjmp	.+86     	; 0x2856 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	a1 f4       	brne	.+40     	; 0x282e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2806:	a2 e3       	ldi	r26, 0x32	; 50
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e2 e3       	ldi	r30, 0x32	; 50
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	48 2f       	mov	r20, r24
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	02 2e       	mov	r0, r18
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <GPIO_writePin+0x194>
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	0a 94       	dec	r0
    2826:	e2 f7       	brpl	.-8      	; 0x2820 <GPIO_writePin+0x190>
    2828:	84 2b       	or	r24, r20
    282a:	8c 93       	st	X, r24
    282c:	14 c0       	rjmp	.+40     	; 0x2856 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    282e:	a2 e3       	ldi	r26, 0x32	; 50
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e2 e3       	ldi	r30, 0x32	; 50
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	48 2f       	mov	r20, r24
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	02 2e       	mov	r0, r18
    2846:	02 c0       	rjmp	.+4      	; 0x284c <GPIO_writePin+0x1bc>
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	0a 94       	dec	r0
    284e:	e2 f7       	brpl	.-8      	; 0x2848 <GPIO_writePin+0x1b8>
    2850:	80 95       	com	r24
    2852:	84 23       	and	r24, r20
    2854:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	00 d0       	rcall	.+0      	; 0x286c <GPIO_readPin+0x6>
    286c:	00 d0       	rcall	.+0      	; 0x286e <GPIO_readPin+0x8>
    286e:	0f 92       	push	r0
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	8a 83       	std	Y+2, r24	; 0x02
    2876:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2878:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	88 30       	cpi	r24, 0x08	; 8
    287e:	08 f0       	brcs	.+2      	; 0x2882 <GPIO_readPin+0x1c>
    2880:	84 c0       	rjmp	.+264    	; 0x298a <GPIO_readPin+0x124>
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	84 30       	cpi	r24, 0x04	; 4
    2886:	08 f0       	brcs	.+2      	; 0x288a <GPIO_readPin+0x24>
    2888:	80 c0       	rjmp	.+256    	; 0x298a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	3d 83       	std	Y+5, r19	; 0x05
    2892:	2c 83       	std	Y+4, r18	; 0x04
    2894:	4c 81       	ldd	r20, Y+4	; 0x04
    2896:	5d 81       	ldd	r21, Y+5	; 0x05
    2898:	41 30       	cpi	r20, 0x01	; 1
    289a:	51 05       	cpc	r21, r1
    289c:	79 f1       	breq	.+94     	; 0x28fc <GPIO_readPin+0x96>
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	9d 81       	ldd	r25, Y+5	; 0x05
    28a2:	82 30       	cpi	r24, 0x02	; 2
    28a4:	91 05       	cpc	r25, r1
    28a6:	34 f4       	brge	.+12     	; 0x28b4 <GPIO_readPin+0x4e>
    28a8:	2c 81       	ldd	r18, Y+4	; 0x04
    28aa:	3d 81       	ldd	r19, Y+5	; 0x05
    28ac:	21 15       	cp	r18, r1
    28ae:	31 05       	cpc	r19, r1
    28b0:	69 f0       	breq	.+26     	; 0x28cc <GPIO_readPin+0x66>
    28b2:	6b c0       	rjmp	.+214    	; 0x298a <GPIO_readPin+0x124>
    28b4:	4c 81       	ldd	r20, Y+4	; 0x04
    28b6:	5d 81       	ldd	r21, Y+5	; 0x05
    28b8:	42 30       	cpi	r20, 0x02	; 2
    28ba:	51 05       	cpc	r21, r1
    28bc:	b9 f1       	breq	.+110    	; 0x292c <GPIO_readPin+0xc6>
    28be:	8c 81       	ldd	r24, Y+4	; 0x04
    28c0:	9d 81       	ldd	r25, Y+5	; 0x05
    28c2:	83 30       	cpi	r24, 0x03	; 3
    28c4:	91 05       	cpc	r25, r1
    28c6:	09 f4       	brne	.+2      	; 0x28ca <GPIO_readPin+0x64>
    28c8:	49 c0       	rjmp	.+146    	; 0x295c <GPIO_readPin+0xf6>
    28ca:	5f c0       	rjmp	.+190    	; 0x298a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    28cc:	e9 e3       	ldi	r30, 0x39	; 57
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a9 01       	movw	r20, r18
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <GPIO_readPin+0x7e>
    28e0:	55 95       	asr	r21
    28e2:	47 95       	ror	r20
    28e4:	8a 95       	dec	r24
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <GPIO_readPin+0x7a>
    28e8:	ca 01       	movw	r24, r20
    28ea:	81 70       	andi	r24, 0x01	; 1
    28ec:	90 70       	andi	r25, 0x00	; 0
    28ee:	88 23       	and	r24, r24
    28f0:	19 f0       	breq	.+6      	; 0x28f8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	49 c0       	rjmp	.+146    	; 0x298a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28f8:	19 82       	std	Y+1, r1	; 0x01
    28fa:	47 c0       	rjmp	.+142    	; 0x298a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    28fc:	e6 e3       	ldi	r30, 0x36	; 54
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a9 01       	movw	r20, r18
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <GPIO_readPin+0xae>
    2910:	55 95       	asr	r21
    2912:	47 95       	ror	r20
    2914:	8a 95       	dec	r24
    2916:	e2 f7       	brpl	.-8      	; 0x2910 <GPIO_readPin+0xaa>
    2918:	ca 01       	movw	r24, r20
    291a:	81 70       	andi	r24, 0x01	; 1
    291c:	90 70       	andi	r25, 0x00	; 0
    291e:	88 23       	and	r24, r24
    2920:	19 f0       	breq	.+6      	; 0x2928 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	31 c0       	rjmp	.+98     	; 0x298a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2928:	19 82       	std	Y+1, r1	; 0x01
    292a:	2f c0       	rjmp	.+94     	; 0x298a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    292c:	e3 e3       	ldi	r30, 0x33	; 51
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a9 01       	movw	r20, r18
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <GPIO_readPin+0xde>
    2940:	55 95       	asr	r21
    2942:	47 95       	ror	r20
    2944:	8a 95       	dec	r24
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <GPIO_readPin+0xda>
    2948:	ca 01       	movw	r24, r20
    294a:	81 70       	andi	r24, 0x01	; 1
    294c:	90 70       	andi	r25, 0x00	; 0
    294e:	88 23       	and	r24, r24
    2950:	19 f0       	breq	.+6      	; 0x2958 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	19 c0       	rjmp	.+50     	; 0x298a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2958:	19 82       	std	Y+1, r1	; 0x01
    295a:	17 c0       	rjmp	.+46     	; 0x298a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    295c:	e0 e3       	ldi	r30, 0x30	; 48
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	a9 01       	movw	r20, r18
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <GPIO_readPin+0x10e>
    2970:	55 95       	asr	r21
    2972:	47 95       	ror	r20
    2974:	8a 95       	dec	r24
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <GPIO_readPin+0x10a>
    2978:	ca 01       	movw	r24, r20
    297a:	81 70       	andi	r24, 0x01	; 1
    297c:	90 70       	andi	r25, 0x00	; 0
    297e:	88 23       	and	r24, r24
    2980:	19 f0       	breq	.+6      	; 0x2988 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	89 83       	std	Y+1, r24	; 0x01
    2986:	01 c0       	rjmp	.+2      	; 0x298a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2988:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
}
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <GPIO_setupPortDirection+0x6>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <GPIO_setupPortDirection+0x8>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	84 30       	cpi	r24, 0x04	; 4
    29b0:	90 f5       	brcc	.+100    	; 0x2a16 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	28 2f       	mov	r18, r24
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	3c 83       	std	Y+4, r19	; 0x04
    29ba:	2b 83       	std	Y+3, r18	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	81 30       	cpi	r24, 0x01	; 1
    29c2:	91 05       	cpc	r25, r1
    29c4:	d1 f0       	breq	.+52     	; 0x29fa <GPIO_setupPortDirection+0x5e>
    29c6:	2b 81       	ldd	r18, Y+3	; 0x03
    29c8:	3c 81       	ldd	r19, Y+4	; 0x04
    29ca:	22 30       	cpi	r18, 0x02	; 2
    29cc:	31 05       	cpc	r19, r1
    29ce:	2c f4       	brge	.+10     	; 0x29da <GPIO_setupPortDirection+0x3e>
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	61 f0       	breq	.+24     	; 0x29f0 <GPIO_setupPortDirection+0x54>
    29d8:	1e c0       	rjmp	.+60     	; 0x2a16 <GPIO_setupPortDirection+0x7a>
    29da:	2b 81       	ldd	r18, Y+3	; 0x03
    29dc:	3c 81       	ldd	r19, Y+4	; 0x04
    29de:	22 30       	cpi	r18, 0x02	; 2
    29e0:	31 05       	cpc	r19, r1
    29e2:	81 f0       	breq	.+32     	; 0x2a04 <GPIO_setupPortDirection+0x68>
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	83 30       	cpi	r24, 0x03	; 3
    29ea:	91 05       	cpc	r25, r1
    29ec:	81 f0       	breq	.+32     	; 0x2a0e <GPIO_setupPortDirection+0x72>
    29ee:	13 c0       	rjmp	.+38     	; 0x2a16 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    29f0:	ea e3       	ldi	r30, 0x3A	; 58
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	80 83       	st	Z, r24
    29f8:	0e c0       	rjmp	.+28     	; 0x2a16 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    29fa:	e7 e3       	ldi	r30, 0x37	; 55
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	80 83       	st	Z, r24
    2a02:	09 c0       	rjmp	.+18     	; 0x2a16 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2a04:	e4 e3       	ldi	r30, 0x34	; 52
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	80 83       	st	Z, r24
    2a0c:	04 c0       	rjmp	.+8      	; 0x2a16 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2a0e:	e1 e3       	ldi	r30, 0x31	; 49
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <GPIO_writePort+0x6>
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <GPIO_writePort+0x8>
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	84 30       	cpi	r24, 0x04	; 4
    2a38:	90 f5       	brcc	.+100    	; 0x2a9e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	3c 83       	std	Y+4, r19	; 0x04
    2a42:	2b 83       	std	Y+3, r18	; 0x03
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	9c 81       	ldd	r25, Y+4	; 0x04
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	d1 f0       	breq	.+52     	; 0x2a82 <GPIO_writePort+0x5e>
    2a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a50:	3c 81       	ldd	r19, Y+4	; 0x04
    2a52:	22 30       	cpi	r18, 0x02	; 2
    2a54:	31 05       	cpc	r19, r1
    2a56:	2c f4       	brge	.+10     	; 0x2a62 <GPIO_writePort+0x3e>
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	61 f0       	breq	.+24     	; 0x2a78 <GPIO_writePort+0x54>
    2a60:	1e c0       	rjmp	.+60     	; 0x2a9e <GPIO_writePort+0x7a>
    2a62:	2b 81       	ldd	r18, Y+3	; 0x03
    2a64:	3c 81       	ldd	r19, Y+4	; 0x04
    2a66:	22 30       	cpi	r18, 0x02	; 2
    2a68:	31 05       	cpc	r19, r1
    2a6a:	81 f0       	breq	.+32     	; 0x2a8c <GPIO_writePort+0x68>
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	83 30       	cpi	r24, 0x03	; 3
    2a72:	91 05       	cpc	r25, r1
    2a74:	81 f0       	breq	.+32     	; 0x2a96 <GPIO_writePort+0x72>
    2a76:	13 c0       	rjmp	.+38     	; 0x2a9e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2a78:	eb e3       	ldi	r30, 0x3B	; 59
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	80 83       	st	Z, r24
    2a80:	0e c0       	rjmp	.+28     	; 0x2a9e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2a82:	e8 e3       	ldi	r30, 0x38	; 56
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	80 83       	st	Z, r24
    2a8a:	09 c0       	rjmp	.+18     	; 0x2a9e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2a8c:	e5 e3       	ldi	r30, 0x35	; 53
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	80 83       	st	Z, r24
    2a94:	04 c0       	rjmp	.+8      	; 0x2a9e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2a96:	e2 e3       	ldi	r30, 0x32	; 50
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <GPIO_readPort+0x6>
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <GPIO_readPort+0x8>
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2aba:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	84 30       	cpi	r24, 0x04	; 4
    2ac0:	90 f5       	brcc	.+100    	; 0x2b26 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	3c 83       	std	Y+4, r19	; 0x04
    2aca:	2b 83       	std	Y+3, r18	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	d1 f0       	breq	.+52     	; 0x2b0a <GPIO_readPort+0x5e>
    2ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad8:	3c 81       	ldd	r19, Y+4	; 0x04
    2ada:	22 30       	cpi	r18, 0x02	; 2
    2adc:	31 05       	cpc	r19, r1
    2ade:	2c f4       	brge	.+10     	; 0x2aea <GPIO_readPort+0x3e>
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	61 f0       	breq	.+24     	; 0x2b00 <GPIO_readPort+0x54>
    2ae8:	1e c0       	rjmp	.+60     	; 0x2b26 <GPIO_readPort+0x7a>
    2aea:	2b 81       	ldd	r18, Y+3	; 0x03
    2aec:	3c 81       	ldd	r19, Y+4	; 0x04
    2aee:	22 30       	cpi	r18, 0x02	; 2
    2af0:	31 05       	cpc	r19, r1
    2af2:	81 f0       	breq	.+32     	; 0x2b14 <GPIO_readPort+0x68>
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	83 30       	cpi	r24, 0x03	; 3
    2afa:	91 05       	cpc	r25, r1
    2afc:	81 f0       	breq	.+32     	; 0x2b1e <GPIO_readPort+0x72>
    2afe:	13 c0       	rjmp	.+38     	; 0x2b26 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2b00:	e9 e3       	ldi	r30, 0x39	; 57
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	0e c0       	rjmp	.+28     	; 0x2b26 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2b0a:	e6 e3       	ldi	r30, 0x36	; 54
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	09 c0       	rjmp	.+18     	; 0x2b26 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2b14:	e3 e3       	ldi	r30, 0x33	; 51
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	04 c0       	rjmp	.+8      	; 0x2b26 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2b1e:	e0 e3       	ldi	r30, 0x30	; 48
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <KEYPAD_getPressedKey+0x6>
    2b3c:	0f 92       	push	r0
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2b42:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2b44:	1b 82       	std	Y+3, r1	; 0x03
    2b46:	43 c0       	rjmp	.+134    	; 0x2bce <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	0e 94 ce 14 	call	0x299c	; 0x299c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	98 2f       	mov	r25, r24
    2b54:	9c 5f       	subi	r25, 0xFC	; 252
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	69 2f       	mov	r22, r25
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	88 2f       	mov	r24, r24
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	9c 01       	movw	r18, r24
    2b68:	2c 5f       	subi	r18, 0xFC	; 252
    2b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <KEYPAD_getPressedKey+0x40>
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	2a 95       	dec	r18
    2b78:	e2 f7       	brpl	.-8      	; 0x2b72 <KEYPAD_getPressedKey+0x3c>
    2b7a:	80 95       	com	r24
    2b7c:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	69 81       	ldd	r22, Y+1	; 0x01
    2b82:	0e 94 12 15 	call	0x2a24	; 0x2a24 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2b86:	1a 82       	std	Y+2, r1	; 0x02
    2b88:	1c c0       	rjmp	.+56     	; 0x2bc2 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b8e:	0e 94 33 14 	call	0x2866	; 0x2866 <GPIO_readPin>
    2b92:	88 23       	and	r24, r24
    2b94:	99 f4       	brne	.+38     	; 0x2bbc <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	88 2f       	mov	r24, r24
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	98 2f       	mov	r25, r24
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	89 0f       	add	r24, r25
    2baa:	8f 5f       	subi	r24, 0xFF	; 255
    2bac:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	8f 5f       	subi	r24, 0xFF	; 255
    2bc0:	8a 83       	std	Y+2, r24	; 0x02
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	84 30       	cpi	r24, 0x04	; 4
    2bc6:	08 f3       	brcs	.-62     	; 0x2b8a <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	8f 5f       	subi	r24, 0xFF	; 255
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	84 30       	cpi	r24, 0x04	; 4
    2bd2:	08 f4       	brcc	.+2      	; 0x2bd6 <KEYPAD_getPressedKey+0xa0>
    2bd4:	b9 cf       	rjmp	.-142    	; 0x2b48 <KEYPAD_getPressedKey+0x12>
    2bd6:	b6 cf       	rjmp	.-148    	; 0x2b44 <KEYPAD_getPressedKey+0xe>

00002bd8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <KEYPAD_4x4_adjustKeyNumber+0x6>
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2be6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	3c 83       	std	Y+4, r19	; 0x04
    2bf0:	2b 83       	std	Y+3, r18	; 0x03
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf6:	88 30       	cpi	r24, 0x08	; 8
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <KEYPAD_4x4_adjustKeyNumber+0x26>
    2bfc:	70 c0       	rjmp	.+224    	; 0x2cde <KEYPAD_4x4_adjustKeyNumber+0x106>
    2bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2c00:	3c 81       	ldd	r19, Y+4	; 0x04
    2c02:	29 30       	cpi	r18, 0x09	; 9
    2c04:	31 05       	cpc	r19, r1
    2c06:	5c f5       	brge	.+86     	; 0x2c5e <KEYPAD_4x4_adjustKeyNumber+0x86>
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0c:	84 30       	cpi	r24, 0x04	; 4
    2c0e:	91 05       	cpc	r25, r1
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2c12:	59 c0       	rjmp	.+178    	; 0x2cc6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2c14:	2b 81       	ldd	r18, Y+3	; 0x03
    2c16:	3c 81       	ldd	r19, Y+4	; 0x04
    2c18:	25 30       	cpi	r18, 0x05	; 5
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	9c f4       	brge	.+38     	; 0x2c44 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
    2c22:	82 30       	cpi	r24, 0x02	; 2
    2c24:	91 05       	cpc	r25, r1
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <KEYPAD_4x4_adjustKeyNumber+0x52>
    2c28:	48 c0       	rjmp	.+144    	; 0x2cba <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c2e:	23 30       	cpi	r18, 0x03	; 3
    2c30:	31 05       	cpc	r19, r1
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2c34:	45 c0       	rjmp	.+138    	; 0x2cc0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2c40:	39 c0       	rjmp	.+114    	; 0x2cb4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2c42:	67 c0       	rjmp	.+206    	; 0x2d12 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2c44:	2b 81       	ldd	r18, Y+3	; 0x03
    2c46:	3c 81       	ldd	r19, Y+4	; 0x04
    2c48:	26 30       	cpi	r18, 0x06	; 6
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2c4e:	41 c0       	rjmp	.+130    	; 0x2cd2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	9c 81       	ldd	r25, Y+4	; 0x04
    2c54:	87 30       	cpi	r24, 0x07	; 7
    2c56:	91 05       	cpc	r25, r1
    2c58:	0c f0       	brlt	.+2      	; 0x2c5c <KEYPAD_4x4_adjustKeyNumber+0x84>
    2c5a:	3e c0       	rjmp	.+124    	; 0x2cd8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2c5c:	37 c0       	rjmp	.+110    	; 0x2ccc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c60:	3c 81       	ldd	r19, Y+4	; 0x04
    2c62:	2c 30       	cpi	r18, 0x0C	; 12
    2c64:	31 05       	cpc	r19, r1
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2c68:	46 c0       	rjmp	.+140    	; 0x2cf6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	8d 30       	cpi	r24, 0x0D	; 13
    2c70:	91 05       	cpc	r25, r1
    2c72:	5c f4       	brge	.+22     	; 0x2c8a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2c74:	2b 81       	ldd	r18, Y+3	; 0x03
    2c76:	3c 81       	ldd	r19, Y+4	; 0x04
    2c78:	2a 30       	cpi	r18, 0x0A	; 10
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	b1 f1       	breq	.+108    	; 0x2cea <KEYPAD_4x4_adjustKeyNumber+0x112>
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	9c 81       	ldd	r25, Y+4	; 0x04
    2c82:	8b 30       	cpi	r24, 0x0B	; 11
    2c84:	91 05       	cpc	r25, r1
    2c86:	a4 f5       	brge	.+104    	; 0x2cf0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2c88:	2d c0       	rjmp	.+90     	; 0x2ce4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2c8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c8e:	2e 30       	cpi	r18, 0x0E	; 14
    2c90:	31 05       	cpc	r19, r1
    2c92:	b9 f1       	breq	.+110    	; 0x2d02 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	9c 81       	ldd	r25, Y+4	; 0x04
    2c98:	8e 30       	cpi	r24, 0x0E	; 14
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	7c f1       	brlt	.+94     	; 0x2cfc <KEYPAD_4x4_adjustKeyNumber+0x124>
    2c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca2:	2f 30       	cpi	r18, 0x0F	; 15
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	79 f1       	breq	.+94     	; 0x2d06 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cac:	80 31       	cpi	r24, 0x10	; 16
    2cae:	91 05       	cpc	r25, r1
    2cb0:	69 f1       	breq	.+90     	; 0x2d0c <KEYPAD_4x4_adjustKeyNumber+0x134>
    2cb2:	2f c0       	rjmp	.+94     	; 0x2d12 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2cb4:	87 e0       	ldi	r24, 0x07	; 7
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	2e c0       	rjmp	.+92     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2cba:	88 e0       	ldi	r24, 0x08	; 8
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	2b c0       	rjmp	.+86     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2cc0:	89 e0       	ldi	r24, 0x09	; 9
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	28 c0       	rjmp	.+80     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2cc6:	85 e2       	ldi	r24, 0x25	; 37
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	25 c0       	rjmp	.+74     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2ccc:	84 e0       	ldi	r24, 0x04	; 4
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	22 c0       	rjmp	.+68     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2cd2:	85 e0       	ldi	r24, 0x05	; 5
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	1f c0       	rjmp	.+62     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2cd8:	86 e0       	ldi	r24, 0x06	; 6
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	1c c0       	rjmp	.+56     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2cde:	8a e2       	ldi	r24, 0x2A	; 42
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	19 c0       	rjmp	.+50     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	16 c0       	rjmp	.+44     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	13 c0       	rjmp	.+38     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2cf0:	83 e0       	ldi	r24, 0x03	; 3
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	10 c0       	rjmp	.+32     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2cf6:	8d e2       	ldi	r24, 0x2D	; 45
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	0d c0       	rjmp	.+26     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2cfc:	8d e0       	ldi	r24, 0x0D	; 13
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	0a c0       	rjmp	.+20     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2d02:	19 82       	std	Y+1, r1	; 0x01
    2d04:	08 c0       	rjmp	.+16     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2d06:	8d e3       	ldi	r24, 0x3D	; 61
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2d0c:	8b e2       	ldi	r24, 0x2B	; 43
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <UART_init+0x6>
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <UART_init+0x8>
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	9c 83       	std	Y+4, r25	; 0x04
    2d34:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d36:	1a 82       	std	Y+2, r1	; 0x02
    2d38:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d3a:	eb e2       	ldi	r30, 0x2B	; 43
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2d42:	ea e2       	ldi	r30, 0x2A	; 42
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	88 e1       	ldi	r24, 0x18	; 24
    2d48:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data) << 1) | ((Config_Ptr->stop_bit) << 3) | ((Config_Ptr->parity) << 4) ;
    2d4a:	a0 e4       	ldi	r26, 0x40	; 64
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d50:	fc 81       	ldd	r31, Y+4	; 0x04
    2d52:	80 81       	ld	r24, Z
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	20 68       	ori	r18, 0x80	; 128
    2d60:	eb 81       	ldd	r30, Y+3	; 0x03
    2d62:	fc 81       	ldd	r31, Y+4	; 0x04
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	28 2b       	or	r18, r24
    2d78:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d7c:	81 81       	ldd	r24, Z+1	; 0x01
    2d7e:	88 2f       	mov	r24, r24
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	82 95       	swap	r24
    2d84:	92 95       	swap	r25
    2d86:	90 7f       	andi	r25, 0xF0	; 240
    2d88:	98 27       	eor	r25, r24
    2d8a:	80 7f       	andi	r24, 0xF0	; 240
    2d8c:	98 27       	eor	r25, r24
    2d8e:	82 2b       	or	r24, r18
    2d90:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2d92:	eb 81       	ldd	r30, Y+3	; 0x03
    2d94:	fc 81       	ldd	r31, Y+4	; 0x04
    2d96:	83 81       	ldd	r24, Z+3	; 0x03
    2d98:	94 81       	ldd	r25, Z+4	; 0x04
    2d9a:	a5 81       	ldd	r26, Z+5	; 0x05
    2d9c:	b6 81       	ldd	r27, Z+6	; 0x06
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	aa 1f       	adc	r26, r26
    2da4:	bb 1f       	adc	r27, r27
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	aa 1f       	adc	r26, r26
    2dac:	bb 1f       	adc	r27, r27
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	aa 1f       	adc	r26, r26
    2db4:	bb 1f       	adc	r27, r27
    2db6:	9c 01       	movw	r18, r24
    2db8:	ad 01       	movw	r20, r26
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	92 e1       	ldi	r25, 0x12	; 18
    2dbe:	aa e7       	ldi	r26, 0x7A	; 122
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__udivmodsi4>
    2dca:	da 01       	movw	r26, r20
    2dcc:	c9 01       	movw	r24, r18
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2dd4:	e0 e4       	ldi	r30, 0x40	; 64
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	9a 81       	ldd	r25, Y+2	; 0x02
    2ddc:	89 2f       	mov	r24, r25
    2dde:	99 27       	eor	r25, r25
    2de0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2de2:	e9 e2       	ldi	r30, 0x29	; 41
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	80 83       	st	Z, r24
}
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	0f 92       	push	r0
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e04:	eb e2       	ldi	r30, 0x2B	; 43
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	80 72       	andi	r24, 0x20	; 32
    2e10:	90 70       	andi	r25, 0x00	; 0
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	b9 f3       	breq	.-18     	; 0x2e04 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e16:	ec e2       	ldi	r30, 0x2C	; 44
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	80 83       	st	Z, r24


}
    2e1e:	0f 90       	pop	r0
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e2e:	eb e2       	ldi	r30, 0x2B	; 43
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	88 23       	and	r24, r24
    2e36:	dc f7       	brge	.-10     	; 0x2e2e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2e38:	ec e2       	ldi	r30, 0x2C	; 44
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
}
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <UART_sendString+0x6>
    2e4a:	0f 92       	push	r0
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	9b 83       	std	Y+3, r25	; 0x03
    2e52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e54:	19 82       	std	Y+1, r1	; 0x01
    2e56:	0e c0       	rjmp	.+28     	; 0x2e74 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	fc 01       	movw	r30, r24
    2e64:	e2 0f       	add	r30, r18
    2e66:	f3 1f       	adc	r31, r19
    2e68:	80 81       	ld	r24, Z
    2e6a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <UART_sendByte>
		i++;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e2 0f       	add	r30, r18
    2e82:	f3 1f       	adc	r31, r19
    2e84:	80 81       	ld	r24, Z
    2e86:	88 23       	and	r24, r24
    2e88:	39 f7       	brne	.-50     	; 0x2e58 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <UART_receiveString+0xa>
    2ea0:	0f 92       	push	r0
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	9b 83       	std	Y+3, r25	; 0x03
    2ea8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eaa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb6:	8c 01       	movw	r16, r24
    2eb8:	02 0f       	add	r16, r18
    2eba:	13 1f       	adc	r17, r19
    2ebc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <UART_recieveByte>
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	80 83       	st	Z, r24
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
	{
		i++;
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	8f 5f       	subi	r24, 0xFF	; 255
    2eca:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed6:	8c 01       	movw	r16, r24
    2ed8:	02 0f       	add	r16, r18
    2eda:	13 1f       	adc	r17, r19
    2edc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <UART_recieveByte>
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	9b 81       	ldd	r25, Y+3	; 0x03
    2eee:	fc 01       	movw	r30, r24
    2ef0:	e2 0f       	add	r30, r18
    2ef2:	f3 1f       	adc	r31, r19
    2ef4:	80 81       	ld	r24, Z
    2ef6:	8d 30       	cpi	r24, 0x0D	; 13
    2ef8:	31 f7       	brne	.-52     	; 0x2ec6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	8a 81       	ldd	r24, Y+2	; 0x02
    2f02:	9b 81       	ldd	r25, Y+3	; 0x03
    2f04:	fc 01       	movw	r30, r24
    2f06:	e2 0f       	add	r30, r18
    2f08:	f3 1f       	adc	r31, r19
    2f0a:	10 82       	st	Z, r1
}
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	1f 91       	pop	r17
    2f18:	0f 91       	pop	r16
    2f1a:	08 95       	ret

00002f1c <__udivmodsi4>:
    2f1c:	a1 e2       	ldi	r26, 0x21	; 33
    2f1e:	1a 2e       	mov	r1, r26
    2f20:	aa 1b       	sub	r26, r26
    2f22:	bb 1b       	sub	r27, r27
    2f24:	fd 01       	movw	r30, r26
    2f26:	0d c0       	rjmp	.+26     	; 0x2f42 <__udivmodsi4_ep>

00002f28 <__udivmodsi4_loop>:
    2f28:	aa 1f       	adc	r26, r26
    2f2a:	bb 1f       	adc	r27, r27
    2f2c:	ee 1f       	adc	r30, r30
    2f2e:	ff 1f       	adc	r31, r31
    2f30:	a2 17       	cp	r26, r18
    2f32:	b3 07       	cpc	r27, r19
    2f34:	e4 07       	cpc	r30, r20
    2f36:	f5 07       	cpc	r31, r21
    2f38:	20 f0       	brcs	.+8      	; 0x2f42 <__udivmodsi4_ep>
    2f3a:	a2 1b       	sub	r26, r18
    2f3c:	b3 0b       	sbc	r27, r19
    2f3e:	e4 0b       	sbc	r30, r20
    2f40:	f5 0b       	sbc	r31, r21

00002f42 <__udivmodsi4_ep>:
    2f42:	66 1f       	adc	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	88 1f       	adc	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	1a 94       	dec	r1
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <__udivmodsi4_loop>
    2f4e:	60 95       	com	r22
    2f50:	70 95       	com	r23
    2f52:	80 95       	com	r24
    2f54:	90 95       	com	r25
    2f56:	9b 01       	movw	r18, r22
    2f58:	ac 01       	movw	r20, r24
    2f5a:	bd 01       	movw	r22, r26
    2f5c:	cf 01       	movw	r24, r30
    2f5e:	08 95       	ret

00002f60 <__prologue_saves__>:
    2f60:	2f 92       	push	r2
    2f62:	3f 92       	push	r3
    2f64:	4f 92       	push	r4
    2f66:	5f 92       	push	r5
    2f68:	6f 92       	push	r6
    2f6a:	7f 92       	push	r7
    2f6c:	8f 92       	push	r8
    2f6e:	9f 92       	push	r9
    2f70:	af 92       	push	r10
    2f72:	bf 92       	push	r11
    2f74:	cf 92       	push	r12
    2f76:	df 92       	push	r13
    2f78:	ef 92       	push	r14
    2f7a:	ff 92       	push	r15
    2f7c:	0f 93       	push	r16
    2f7e:	1f 93       	push	r17
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	ca 1b       	sub	r28, r26
    2f8a:	db 0b       	sbc	r29, r27
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	09 94       	ijmp

00002f98 <__epilogue_restores__>:
    2f98:	2a 88       	ldd	r2, Y+18	; 0x12
    2f9a:	39 88       	ldd	r3, Y+17	; 0x11
    2f9c:	48 88       	ldd	r4, Y+16	; 0x10
    2f9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fa0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fa2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fa4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fa6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fa8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2faa:	b9 84       	ldd	r11, Y+9	; 0x09
    2fac:	c8 84       	ldd	r12, Y+8	; 0x08
    2fae:	df 80       	ldd	r13, Y+7	; 0x07
    2fb0:	ee 80       	ldd	r14, Y+6	; 0x06
    2fb2:	fd 80       	ldd	r15, Y+5	; 0x05
    2fb4:	0c 81       	ldd	r16, Y+4	; 0x04
    2fb6:	1b 81       	ldd	r17, Y+3	; 0x03
    2fb8:	aa 81       	ldd	r26, Y+2	; 0x02
    2fba:	b9 81       	ldd	r27, Y+1	; 0x01
    2fbc:	ce 0f       	add	r28, r30
    2fbe:	d1 1d       	adc	r29, r1
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	ed 01       	movw	r28, r26
    2fcc:	08 95       	ret

00002fce <itoa>:
    2fce:	fb 01       	movw	r30, r22
    2fd0:	9f 01       	movw	r18, r30
    2fd2:	e8 94       	clt
    2fd4:	42 30       	cpi	r20, 0x02	; 2
    2fd6:	c4 f0       	brlt	.+48     	; 0x3008 <itoa+0x3a>
    2fd8:	45 32       	cpi	r20, 0x25	; 37
    2fda:	b4 f4       	brge	.+44     	; 0x3008 <itoa+0x3a>
    2fdc:	4a 30       	cpi	r20, 0x0A	; 10
    2fde:	29 f4       	brne	.+10     	; 0x2fea <itoa+0x1c>
    2fe0:	97 fb       	bst	r25, 7
    2fe2:	1e f4       	brtc	.+6      	; 0x2fea <itoa+0x1c>
    2fe4:	90 95       	com	r25
    2fe6:	81 95       	neg	r24
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	64 2f       	mov	r22, r20
    2fec:	77 27       	eor	r23, r23
    2fee:	0e 94 18 18 	call	0x3030	; 0x3030 <__udivmodhi4>
    2ff2:	80 5d       	subi	r24, 0xD0	; 208
    2ff4:	8a 33       	cpi	r24, 0x3A	; 58
    2ff6:	0c f0       	brlt	.+2      	; 0x2ffa <itoa+0x2c>
    2ff8:	89 5d       	subi	r24, 0xD9	; 217
    2ffa:	81 93       	st	Z+, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	a1 f7       	brne	.-24     	; 0x2fea <itoa+0x1c>
    3002:	16 f4       	brtc	.+4      	; 0x3008 <itoa+0x3a>
    3004:	5d e2       	ldi	r21, 0x2D	; 45
    3006:	51 93       	st	Z+, r21
    3008:	10 82       	st	Z, r1
    300a:	c9 01       	movw	r24, r18
    300c:	0c 94 08 18 	jmp	0x3010	; 0x3010 <strrev>

00003010 <strrev>:
    3010:	dc 01       	movw	r26, r24
    3012:	fc 01       	movw	r30, r24
    3014:	67 2f       	mov	r22, r23
    3016:	71 91       	ld	r23, Z+
    3018:	77 23       	and	r23, r23
    301a:	e1 f7       	brne	.-8      	; 0x3014 <strrev+0x4>
    301c:	32 97       	sbiw	r30, 0x02	; 2
    301e:	04 c0       	rjmp	.+8      	; 0x3028 <strrev+0x18>
    3020:	7c 91       	ld	r23, X
    3022:	6d 93       	st	X+, r22
    3024:	70 83       	st	Z, r23
    3026:	62 91       	ld	r22, -Z
    3028:	ae 17       	cp	r26, r30
    302a:	bf 07       	cpc	r27, r31
    302c:	c8 f3       	brcs	.-14     	; 0x3020 <strrev+0x10>
    302e:	08 95       	ret

00003030 <__udivmodhi4>:
    3030:	aa 1b       	sub	r26, r26
    3032:	bb 1b       	sub	r27, r27
    3034:	51 e1       	ldi	r21, 0x11	; 17
    3036:	07 c0       	rjmp	.+14     	; 0x3046 <__udivmodhi4_ep>

00003038 <__udivmodhi4_loop>:
    3038:	aa 1f       	adc	r26, r26
    303a:	bb 1f       	adc	r27, r27
    303c:	a6 17       	cp	r26, r22
    303e:	b7 07       	cpc	r27, r23
    3040:	10 f0       	brcs	.+4      	; 0x3046 <__udivmodhi4_ep>
    3042:	a6 1b       	sub	r26, r22
    3044:	b7 0b       	sbc	r27, r23

00003046 <__udivmodhi4_ep>:
    3046:	88 1f       	adc	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	5a 95       	dec	r21
    304c:	a9 f7       	brne	.-22     	; 0x3038 <__udivmodhi4_loop>
    304e:	80 95       	com	r24
    3050:	90 95       	com	r25
    3052:	bc 01       	movw	r22, r24
    3054:	cd 01       	movw	r24, r26
    3056:	08 95       	ret

00003058 <_exit>:
    3058:	f8 94       	cli

0000305a <__stop_program>:
    305a:	ff cf       	rjmp	.-2      	; 0x305a <__stop_program>
